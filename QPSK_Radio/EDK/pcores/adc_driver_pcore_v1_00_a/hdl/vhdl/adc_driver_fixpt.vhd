-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\QPSK_Pcore\QPSK_Radio\MATLAB\codegen\adc_driver\hdlsrc\adc_driver_fixpt.vhd
-- Created: 2014-01-16 16:34:40
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- rx_i                          ce_out        1
-- rx_q                          ce_out        1
-- blinky                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: adc_driver_fixpt
-- Source Path: adc_driver_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY adc_driver_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        rxd                               :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        rx_iq_sel                         :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        rx_i                              :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rx_q                              :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        blinky                            :   OUT   std_logic  -- ufix1
        );
END adc_driver_fixpt;


ARCHITECTURE rtl OF adc_driver_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL rxd_signed                       : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_out_delay                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_2                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_3                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_out                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rx_i_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_6                            : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt                       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL p6blinky_cnt_add_temp            : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL tmp_7                            : std_logic;
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL p20blinky_mul_temp               : unsigned(38 DOWNTO 0);  -- ufix39_En37
  SIGNAL blinky_2                         : std_logic;  -- ufix1

BEGIN
  
  tmp <= '1' WHEN rx_iq_sel = '0' ELSE
      '0';

  
  tmp_1 <= '1' WHEN rx_iq_sel = '0' ELSE
      '0';

  rxd_signed <= signed(rxd);

  enb <= clk_enable;

  
  tmp_2 <= rxd_signed WHEN tmp_1 = '1' ELSE
      i_out_delay;

  i_out_delay_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_out_delay <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_out_delay <= tmp_2;
      END IF;
    END IF;
  END PROCESS i_out_delay_reg_process;


  i_out_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_out <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_out <= tmp_3;
      END IF;
    END IF;
  END PROCESS i_out_reg_process;


  
  tmp_3 <= i_out WHEN tmp = '1' ELSE
      i_out_delay;

  -- ADC runs at 2x the rate the output changes at
  rx_i_1 <= tmp_3;

  rx_i <= std_logic_vector(rx_i_1);

  --HDL code generation from MATLAB function: adc_driver_fixpt
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- deinterleave txd into I and Q channels
  
  tmp_4 <= '1' WHEN rx_iq_sel = '0' ELSE
      '0';

  q_out_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_out <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_out <= tmp_5;
      END IF;
    END IF;
  END PROCESS q_out_reg_process;


  
  tmp_5 <= q_out WHEN tmp_4 = '1' ELSE
      rxd_signed;

  rx_q <= std_logic_vector(tmp_5);

  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt <= tmp_6;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;


  p6blinky_cnt_add_temp <= resize(blinky_cnt, 26) + 1;
  
  blinky_cnt_1 <= "1111111111111111111111111" WHEN p6blinky_cnt_add_temp(25) /= '0' ELSE
      p6blinky_cnt_add_temp(24 DOWNTO 0);

  
  tmp_7 <= '1' WHEN blinky_cnt_1 = 20000000 ELSE
      '0';

  
  tmp_6 <= to_unsigned(2#0000000000000000000000000#, 25) WHEN tmp_7 = '1' ELSE
      blinky_cnt_1;

  p20blinky_mul_temp <= tmp_6 * to_unsigned(2#11010110101111#, 14);
  
  blinky_1 <= '1' WHEN p20blinky_mul_temp(38) /= '0' ELSE
      p20blinky_mul_temp(37);

  blinky_2 <= blinky_1;

  blinky <= blinky_2;

  ce_out <= clk_enable;

END rtl;

