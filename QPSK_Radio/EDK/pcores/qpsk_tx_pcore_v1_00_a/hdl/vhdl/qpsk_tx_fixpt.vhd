-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\QPSK_Pcore\QPSK_Radio\MATLAB\codegen\qpsk_tx\hdlsrc\qpsk_tx_fixpt.vhd
-- Created: 2014-01-16 16:46:53
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- tx_done_out                   ce_out        1
-- request_byte                  ce_out        1
-- blinky                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qpsk_tx_fixpt
-- Source Path: qpsk_tx_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.qpsk_tx_fixpt_pkg.ALL;

ENTITY qpsk_tx_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        empty_in                          :   IN    std_logic;  -- ufix1
        clear_fifo_in                     :   IN    std_logic;  -- ufix1
        tx_en_in                          :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        tx_done_out                       :   OUT   std_logic;  -- ufix1
        request_byte                      :   OUT   std_logic;  -- ufix1
        blinky                            :   OUT   std_logic  -- ufix1
        );
END qpsk_tx_fixpt;


ARCHITECTURE rtl OF qpsk_tx_fixpt IS

  -- Component Declarations
  COMPONENT tx_fifo_ram
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          wr_addr                         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          rd_dout                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_fifo_ram
    USE ENTITY work.tx_fifo_ram(rtl);

  -- Constants
  CONSTANT tbi                            : vector_of_signed2(0 TO 64) := ( to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2) );  -- sfix2 [65]
  CONSTANT tbq                            : vector_of_signed2(0 TO 64) := ( to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2) );  -- sfix2 [65]
  CONSTANT tbi_2                          : vector_of_signed2(0 TO 64) := ( to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2) );  -- sfix2 [65]
  CONSTANT tbq_2                          : vector_of_signed2(0 TO 64) := ( to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#01#, 2),
                                                                           to_signed(2#01#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2), to_signed(2#11#, 2),
                                                                           to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2), to_signed(2#01#, 2), to_signed(2#11#, 2) );  -- sfix2 [65]
  CONSTANT nc                             : vector_of_signed14(0 TO 16) := ( to_signed(2#00000001101101#, 14), to_signed(2#11111110100001#, 14), to_signed(2#11111100111110#, 14),
                                                                            to_signed(2#00000101010001#, 14), to_signed(2#00000100010010#, 14), to_signed(2#11110010010000#, 14),
                                                                            to_signed(2#11111010110100#, 14), to_signed(2#00110010001011#, 14), to_signed(2#01010110001110#, 14),
                                                                            to_signed(2#00110010001011#, 14), to_signed(2#11111010110100#, 14), to_signed(2#11110010010000#, 14),
                                                                            to_signed(2#00000100010010#, 14), to_signed(2#00000101010001#, 14), to_signed(2#11111100111110#, 14),
                                                                            to_signed(2#11111110100001#, 14), to_signed(2#00000001101101#, 14) );  -- sfix14 [17]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL c_re                             : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL c_im                             : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL c_re_1                           : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL c_im_1                           : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL tmp                              : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL tmp_1                            : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : std_logic;
  SIGNAL tmp_4                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_5                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_6                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_7                            : std_logic;
  SIGNAL tmp_8                            : std_logic;
  SIGNAL tmp_9                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_10                           : std_logic;
  SIGNAL tmp_11                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL reBuf                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_12                           : std_logic;
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : std_logic;
  SIGNAL tmp_15                           : std_logic;
  SIGNAL tmp_16                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_17                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_18                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL wrCount                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_19                           : std_logic;
  SIGNAL tmp_20                           : std_logic;
  SIGNAL sentTrain                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_21                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count                            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_22                           : std_logic;
  SIGNAL tmp_23                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_24                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_1                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_25                           : std_logic;
  SIGNAL tmp_26                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL count_2                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_27                           : std_logic;
  SIGNAL tmp_28                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL count_3                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_29                           : std_logic;  -- ufix1
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p64_tmp                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p64_tmp_1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p64_tmp_2                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_32                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_33                           : std_logic;
  SIGNAL tmp_34                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_35                           : std_logic;
  SIGNAL tmp_36                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p66_tmp                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p66_tmp_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_37                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_38                           : std_logic;
  SIGNAL tmp_39                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL rdCount                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_40                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p76_tmp                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p76_tmp_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p76_tmp_2                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_41                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_42                           : std_logic;
  SIGNAL tmp_43                           : std_logic;  -- ufix1
  SIGNAL p74_tmp                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p74_tmp_1                        : std_logic;  -- ufix1
  SIGNAL p74_tmp_2                        : std_logic;  -- ufix1
  SIGNAL p74_tmp_3                        : std_logic;  -- ufix1
  SIGNAL tmp_44                           : std_logic;  -- ufix1
  SIGNAL tmp_45                           : std_logic;  -- ufix1
  SIGNAL txDone                           : std_logic;  -- ufix1
  SIGNAL tmp_46                           : std_logic;
  SIGNAL tmp_47                           : std_logic;
  SIGNAL iA                               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_1                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL tmp_48                           : std_logic;
  SIGNAL symIndex                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_49                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_50                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p79_tmp                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p79_tmp_1                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p79_tmp_2                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p79_tmp_3                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p79_1                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p79_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p79_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p79_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p79_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p79_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p79_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL sym2                             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p106sym2_cast                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL sym2_1                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_51                           : std_logic;
  SIGNAL wrIndex                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_52                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_53                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p151tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo_ram_wrenb                : std_logic;  -- ufix1
  SIGNAL rdIndex                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_54                           : std_logic;
  SIGNAL tmp_55                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_56                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p124tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL tx_fifo_unsigned                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_57                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p86tmp_cast                      : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL p86tmp_cast_1                    : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_58                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p87tmp_cast                      : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL p87tmp_cast_1                    : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_59                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p88tmp_cast                      : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL p88tmp_cast_1                    : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_60                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p89tmp_cast                      : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL p89tmp_cast_1                    : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_61                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p90tmp_cast                      : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL p90tmp_cast_1                    : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_62                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p91tmp_cast                      : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL p91tmp_cast_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_63                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p92tmp_cast                      : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL p92tmp_cast_1                    : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_65                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_2                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL tmp_66                           : std_logic;
  SIGNAL tmp_67                           : std_logic;
  SIGNAL iA_3                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_4                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_5                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_4                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL diLatch                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_68                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p72_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p72_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p72_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p72_tmp_3                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p72_tmp_4                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p72_tmp_5                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p72_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p72_1                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p72_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p72_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p72_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p72_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p72_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p72_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p72_sub_temp_1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p72_sub_temp_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p72_cast_2                       : std_logic;  -- ufix1
  SIGNAL p72_sub_cast_2                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p72_sub_temp_3                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p72_sub_temp_4                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p72_sub_cast_3                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL iA_6                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL fmo_1                            : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL fmo_1_1                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL sentTrain_2                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_5                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_69                           : std_logic;
  SIGNAL tmp_70                           : std_logic;
  SIGNAL iA_7                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sym2_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL a                                : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL c                                : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_71                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_1                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL c_1                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_72                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_2                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL c_2                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_73                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_3                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL c_3                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_74                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_4                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL c_4                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_75                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_5                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL c_5                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_76                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_6                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL c_6                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_77                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_79                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_8                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL tmp_80                           : std_logic;
  SIGNAL tmp_81                           : std_logic;
  SIGNAL iA_9                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_10                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_11                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_3                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_6                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dqLatch                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_82                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p69_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p69_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p69_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p69_tmp_3                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p69_tmp_4                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p69_tmp_5                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p69_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p69_1                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p69_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p69_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p69_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p69_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p69_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p69_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p69_sub_temp_1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p69_sub_temp_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p69_cast_2                       : std_logic;  -- ufix1
  SIGNAL p69_sub_cast_2                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p69_sub_temp_3                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p69_sub_temp_4                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p69_sub_cast_3                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL iA_12                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL fmo_2                            : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL fmo_2_1                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL sentTrain_4                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_7                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_83                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p62_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p62_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p62_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p62_tmp_3                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p62_tmp_4                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p62_tmp_5                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p62_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p62_1                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p62_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p62_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p62_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p62_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p62_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p62_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p62_sub_temp_1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p62_sub_temp_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p62_cast_2                       : std_logic;  -- ufix1
  SIGNAL p62_sub_cast_2                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p62_sub_temp_3                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p62_sub_temp_4                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p62_sub_cast_3                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_84                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p60_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p60_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p60_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p60_tmp_3                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p60_tmp_4                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p60_tmp_5                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p60_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p60_1                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p60_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p60_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p60_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p60_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p60_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p60_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p60_sub_temp_1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p60_sub_temp_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p60_cast_2                       : std_logic;  -- ufix1
  SIGNAL p60_sub_cast_2                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p60_sub_temp_3                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p60_sub_temp_4                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p60_sub_cast_3                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL byte_out_re                      : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL byte_out_im                      : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL buf_re                           : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL buf_im                           : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL buf_re_1                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL buf_im_1                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL tmp_re                           : vector_of_signed2(0 TO 15);  -- sfix2 [16]
  SIGNAL tmp_im                           : vector_of_signed2(0 TO 15);  -- sfix2 [16]
  SIGNAL tmp_re_1                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL tmp_im_1                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL c_re_2                           : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL c_im_2                           : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL d_ssrc_re                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL d_ssrc_im                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p30d_ssrc_cast                   : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL p30d_ssrc_cast_1                 : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL a0                               : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL tmp_85                           : std_logic;
  SIGNAL p25tmp_cast                      : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL p25tmp_cast_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL c_7                              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p28c_cast                        : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_86                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL p26tmp_add_cast                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL p26tmp_add_temp                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL tmp_87                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL p27tmp_sub_cast                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL p27tmp_sub_temp                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL p27tmp_cast                      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL tmp_88                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL a0_1                             : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL tmp_89                           : std_logic;
  SIGNAL p18tmp_cast                      : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL p18tmp_cast_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL c_8                              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p21c_cast                        : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_90                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL p19tmp_add_cast                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL p19tmp_add_temp                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL tmp_91                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL p20tmp_sub_cast                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL p20tmp_sub_temp                  : signed(14 DOWNTO 0);  -- sfix15_En1
  SIGNAL p20tmp_cast                      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL tmp_92                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_93                           : std_logic;  -- ufix1
  SIGNAL tx_done                          : std_logic;  -- ufix1
  SIGNAL tx_done_out_1                    : std_logic;  -- ufix1
  SIGNAL tx_done_out_2                    : std_logic;  -- ufix1
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_94                           : std_logic;
  SIGNAL fmo_3                            : std_logic;  -- ufix1
  SIGNAL tmp_95                           : std_logic;  -- ufix1
  SIGNAL request_byte_1                   : std_logic;  -- ufix1
  SIGNAL request_byte_2                   : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_1                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_96                           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt                       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL tmp_97                           : std_logic;
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL p165blinky_mul_temp              : unsigned(38 DOWNTO 0);  -- ufix39_En37
  SIGNAL p165blinky_cast                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL blinky_2                         : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_2                 : std_logic_vector(0 TO 1);  -- ufix1 [2]

BEGIN
  u_tx_fifo_ram : tx_fifo_ram
    PORT MAP( clk => clk,
              enb => ce,
              wr_din => data_in,  -- ufix8
              wr_addr => std_logic_vector(indexLogic_fixptsig),  -- ufix10
              wr_en => tx_fifo_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),  -- ufix10
              rd_dout => tx_fifo  -- ufix8
              );

  c_re <= to_signed(2#000000000000000000000#, 21);
  c_im <= to_signed(2#000000000000000000000#, 21);

  enb <= ce;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_re_1 <= to_signed(2#000000000000000000000#, 21);
      c_im_1 <= to_signed(2#000000000000000000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_re_1 <= c_re;
        c_im_1 <= c_im;
      END IF;
    END IF;
  END PROCESS delayMatch_process;



  tmp_gen: FOR t_0 IN 0 TO 15 GENERATE
    tmp(t_0) <= to_signed(1 + t_0, 32);
  END GENERATE tmp_gen;


  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  
  tmp_2 <= '1' WHEN clear_fifo_in = '1' ELSE
      '0';

  
  tmp_3 <= '1' WHEN clear_fifo_in = '1' ELSE
      '0';

  tmp_5 <= tmp_4 - 1;

  
  tmp_7 <= '1' WHEN (empty_in = '0') AND (tmp_6 = 0) ELSE
      '0';

  
  tmp_4 <= to_unsigned(2#1000#, 4) WHEN tmp_7 = '1' ELSE
      tmp_6;

  
  tmp_8 <= '1' WHEN tmp_4 > 0 ELSE
      '0';

  
  tmp_9 <= tmp_5 WHEN tmp_8 = '1' ELSE
      tmp_4;

  
  tmp_10 <= '1' WHEN tmp_9 = 1 ELSE
      '0';

  
  tmp_11 <= to_unsigned(2#0000#, 4) WHEN tmp_10 = '1' ELSE
      tmp_9;

  reBuf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reBuf <= to_unsigned(2#0000#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reBuf <= tmp_11;
      END IF;
    END IF;
  END PROCESS reBuf_reg_process;


  
  tmp_6 <= to_unsigned(2#0000#, 4) WHEN tmp_3 = '1' ELSE
      reBuf;

  
  tmp_12 <= '1' WHEN (empty_in = '0') AND (tmp_6 = 0) ELSE
      '0';

  
  tmp_13 <= '1' WHEN tmp_9 = 1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- this core runs at an oversampling rate of 8
  -- number of symbols per byte (QPSK 4)
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- if want to transmit a new packet reset things
  
  tmp_14 <= '1' WHEN clear_fifo_in = '1' ELSE
      '0';

  
  tmp_15 <= '1' WHEN tmp_9 = 1 ELSE
      '0';

  
  tmp_18 <= tmp_16 WHEN tmp_15 = '1' ELSE
      tmp_17;

  wrCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrCount <= to_unsigned(2#00000000000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wrCount <= tmp_18;
      END IF;
    END IF;
  END PROCESS wrCount_reg_process;


  
  tmp_17 <= to_unsigned(2#00000000000#, 11) WHEN tmp_14 = '1' ELSE
      wrCount;

  tmp_16 <= tmp_17 + 1;

  
  tmp_19 <= '1' WHEN tmp_9 = 1 ELSE
      '0';

  
  tmp_20 <= '1' WHEN tmp_9 = 1 ELSE
      '0';

  --HDL code generation from MATLAB function: qpsk_tx_fixpt
  --total number of bytes to send out
  tmp_21 <= sentTrain + 1;

  
  tmp_22 <= '1' WHEN count >= 8 ELSE
      '0';

  
  tmp_23 <= tmp_21 WHEN tmp_22 = '1' ELSE
      sentTrain;

  tmp_24 <= sentTrain + 1;

  count <= count_1 + 1;

  
  tmp_25 <= '1' WHEN count >= 8 ELSE
      '0';

  
  tmp_26 <= to_unsigned(2#000000#, 6) WHEN tmp_25 = '1' ELSE
      count;

  
  tmp_27 <= '1' WHEN count_2 >= 8 ELSE
      '0';

  
  tmp_28 <= to_unsigned(2#000000#, 6) WHEN tmp_27 = '1' ELSE
      count_2;

  count_3 <= count_1 + 1;

  
  tmp_30 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  
  p64_tmp <= to_unsigned(2#000000#, 6) WHEN resize(count_3, 7) >= 32 ELSE
      count_3;
  
  p64_tmp_1 <= tmp_28 WHEN sentTrain <= 89 ELSE
      p64_tmp;
  
  p64_tmp_2 <= tmp_26 WHEN sentTrain <= 24 ELSE
      p64_tmp_1;
  
  tmp_31 <= p64_tmp_2 WHEN tmp_30 = '1' ELSE
      count_1;

  
  tmp_32 <= to_unsigned(2#000000#, 6) WHEN tmp_20 = '1' ELSE
      tmp_31;

  count_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_1 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_1 <= tmp_32;
      END IF;
    END IF;
  END PROCESS count_reg_process;


  count_2 <= count_1 + 1;

  
  tmp_33 <= '1' WHEN count_2 >= 8 ELSE
      '0';

  
  tmp_34 <= tmp_24 WHEN tmp_33 = '1' ELSE
      sentTrain;

  
  tmp_35 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  
  p66_tmp <= tmp_34 WHEN sentTrain <= 89 ELSE
      sentTrain;
  
  p66_tmp_1 <= tmp_23 WHEN sentTrain <= 24 ELSE
      p66_tmp;
  
  tmp_36 <= p66_tmp_1 WHEN tmp_35 = '1' ELSE
      sentTrain;

  
  tmp_37 <= to_unsigned(2#00000001#, 8) WHEN tmp_19 = '1' ELSE
      tmp_36;

  sentTrain_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain <= tmp_37;
      END IF;
    END IF;
  END PROCESS sentTrain_reg_process;


  
  tmp_38 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  
  p76_tmp <= tmp_39 WHEN resize(count_3, 7) >= 32 ELSE
      rdCount;
  
  p76_tmp_1 <= rdCount WHEN sentTrain <= 89 ELSE
      p76_tmp;
  
  p76_tmp_2 <= rdCount WHEN sentTrain <= 24 ELSE
      p76_tmp_1;
  
  tmp_40 <= p76_tmp_2 WHEN tmp_38 = '1' ELSE
      rdCount;

  
  tmp_41 <= tmp_16 WHEN tmp_13 = '1' ELSE
      tmp_40;

  rdCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rdCount <= to_unsigned(2#00000000000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rdCount <= tmp_41;
      END IF;
    END IF;
  END PROCESS rdCount_reg_process;


  tmp_39 <= rdCount - 1;

  
  tmp_42 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  
  p74_tmp <= tmp_39 WHEN resize(count_3, 7) >= 32 ELSE
      rdCount;
  
  p74_tmp_1 <= '1' WHEN p74_tmp = 0 ELSE
      tmp_29;
  
  p74_tmp_2 <= tmp_29 WHEN sentTrain <= 89 ELSE
      p74_tmp_1;
  
  p74_tmp_3 <= tmp_29 WHEN sentTrain <= 24 ELSE
      p74_tmp_2;
  
  tmp_43 <= p74_tmp_3 WHEN tmp_42 = '1' ELSE
      tmp_29;

  
  tmp_44 <= '0' WHEN tmp_12 = '1' ELSE
      tmp_43;

  tmp_45 <= tmp_44;

  txDone_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      txDone <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        txDone <= tmp_45;
      END IF;
    END IF;
  END PROCESS txDone_reg_process;


  
  tmp_29 <= '0' WHEN tmp_2 = '1' ELSE
      txDone;

  
  tmp_46 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_47 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_47 <= tmp_46;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  iA <= resize(count_1, 8);

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_1 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_1 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  -- fifo should be empty and the processor says go ahead and transmit
  -- we stop when we've written all the data out that we wrote to the fifo.
  -- This core doesn't care about packet length, just about how many bytes got
  -- written to the fifo.
  
  tmp_48 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  tmp_49 <= symIndex + 1;

  p79_1 <= iA srl 3;
  p79_cast <= signed(resize(p79_1, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p79_mul_temp <= resize(p79_cast & '0' & '0' & '0', 41);
  p79_sub_cast <= p79_mul_temp(31 DOWNTO 0);
  p79_sub_cast_1 <= unsigned(p79_sub_cast(7 DOWNTO 0));
  p79_sub_temp <= iA - p79_sub_cast_1;
  
  p79_cast_1 <= "111111" WHEN p79_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p79_sub_temp(5 DOWNTO 0);
  
  p79_tmp <= tmp_49 WHEN p79_cast_1 = 0 ELSE
      symIndex;
  
  p79_tmp_1 <= to_unsigned(2#000#, 3) WHEN resize(count_3, 7) >= 32 ELSE
      p79_tmp;
  
  p79_tmp_2 <= symIndex WHEN sentTrain <= 89 ELSE
      p79_tmp_1;
  
  p79_tmp_3 <= symIndex WHEN sentTrain <= 24 ELSE
      p79_tmp_2;
  
  tmp_50 <= p79_tmp_3 WHEN tmp_48 = '1' ELSE
      symIndex;

  symIndex_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      symIndex <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        symIndex <= tmp_50;
      END IF;
    END IF;
  END PROCESS symIndex_reg_process;


  p106sym2_cast <= resize(symIndex & '0', 5);
  sym2 <= p106sym2_cast(2 DOWNTO 0);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_1 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_1 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  
  tmp_51 <= '1' WHEN tmp_9 = 1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- transfer data from processor to internal buffer
  -- Because the core has a non-zero throughput we need to stale a bit for the
  -- requested data to make it to our input. So, I'm doing that we reBuf
  -- counter. There are definitely more efficient ways to do this but I'm
  -- gonna leave that for another day.
  wrIndex <= to_unsigned(2#10000000000#, 11);

  
  tmp_52 <= tmp_16 WHEN tmp_51 = '1' ELSE
      wrIndex;

  p151tmp_sub_cast <= signed(resize(tmp_52, 32));
  tmp_53 <= p151tmp_sub_cast - 1;

  indexLogic_fixptsig <= unsigned(tmp_53(9 DOWNTO 0));

  tx_fifo_ram_wrenb <= '1';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- we are ready to transmit some data
  rdIndex <= resize(resize(resize(tmp_17, 12) - resize(rdCount, 12), 13) + 1, 11);

  
  tmp_54 <= '1' WHEN rdIndex <= 0 ELSE
      '0';

  
  tmp_55 <= to_unsigned(2#10000000000#, 11) WHEN tmp_54 = '1' ELSE
      rdIndex;

  p124tmp_sub_cast <= signed(resize(tmp_55, 32));
  tmp_56 <= p124tmp_sub_cast - 1;

  indexLogic_fixptsig_1 <= unsigned(tmp_56(9 DOWNTO 0));

  tx_fifo_unsigned <= unsigned(tx_fifo);

  p86tmp_cast <= tx_fifo_unsigned & '0';
  p86tmp_cast_1 <= p86tmp_cast srl 1;
  tmp_57 <= p86tmp_cast_1(8 DOWNTO 1);

  p87tmp_cast <= tx_fifo_unsigned & '0' & '0';
  p87tmp_cast_1 <= p87tmp_cast srl 2;
  tmp_58 <= p87tmp_cast_1(9 DOWNTO 2);

  p88tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0';
  p88tmp_cast_1 <= p88tmp_cast srl 3;
  tmp_59 <= p88tmp_cast_1(10 DOWNTO 3);

  p89tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0';
  p89tmp_cast_1 <= p89tmp_cast srl 4;
  tmp_60 <= p89tmp_cast_1(11 DOWNTO 4);

  p90tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0';
  p90tmp_cast_1 <= p90tmp_cast srl 5;
  tmp_61 <= p90tmp_cast_1(12 DOWNTO 5);

  p91tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0';
  p91tmp_cast_1 <= p91tmp_cast srl 6;
  tmp_62 <= p91tmp_cast_1(13 DOWNTO 6);

  p92tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p92tmp_cast_1 <= p92tmp_cast srl 7;
  tmp_63 <= p92tmp_cast_1(14 DOWNTO 7);

  p84_output : PROCESS (sym2_1, tx_fifo_unsigned, tmp_57, tmp_58, tmp_59, tmp_60, tmp_61, tmp_62,
       tmp_63)
    VARIABLE tmp64 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp := resize(sym2_1, 4) + 1;

    CASE add_temp IS
      WHEN "0001" =>
        tmp64 := tx_fifo_unsigned;
      WHEN "0010" =>
        tmp64 := tmp_57;
      WHEN "0011" =>
        tmp64 := tmp_58;
      WHEN "0100" =>
        tmp64 := tmp_59;
      WHEN "0101" =>
        tmp64 := tmp_60;
      WHEN "0110" =>
        tmp64 := tmp_61;
      WHEN "0111" =>
        tmp64 := tmp_62;
      WHEN "1000" =>
        tmp64 := tmp_63;
      WHEN OTHERS => 
        tmp64 := to_unsigned(2#00000000#, 8);
    END CASE;

    tmp_65 <= tmp64;
  END PROCESS p84_output;


  iA_2 <= tmp_65;

  
  tmp_66 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_67 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_67 <= tmp_66;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_3 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_3 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  iA_4 <= sentTrain;

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_5 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_5 <= iA_4;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_1 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_1 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_4 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_4 <= count_1;
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;


  p72_sub_temp_1 <= resize((iA_5 - resize((iA_5 srl 1) * 2, 8)) * to_unsigned(2#10#, 2), 11) - 1;
  
  p72_tmp <= signed(p72_sub_temp_1(1 DOWNTO 0)) WHEN count_4 = 0 ELSE
      diLatch;
  p72_sub_temp_4 <= resize(sentTrain_1, 9) - 24;
  p72_sub_cast_3 <= signed(resize(p72_sub_temp_4, 32));
  p72_tmp_1 <= p72_sub_cast_3 - 1;
  
  p72_tmp_2 <= to_signed(16#00000000#, 32) WHEN p72_tmp_1 < 0 ELSE
      p72_tmp_1;
  
  p72_tmp_3 <= tbi(to_integer(p72_tmp_2)) WHEN count_4 = 0 ELSE
      diLatch;
  p72_1 <= iA_3 srl 3;
  p72_cast <= signed(resize(p72_1, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p72_mul_temp <= resize(p72_cast & '0' & '0' & '0', 41);
  p72_sub_cast <= p72_mul_temp(31 DOWNTO 0);
  p72_sub_cast_1 <= unsigned(p72_sub_cast(7 DOWNTO 0));
  p72_sub_temp <= iA_3 - p72_sub_cast_1;
  
  p72_cast_1 <= "111111" WHEN p72_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p72_sub_temp(5 DOWNTO 0);
  p72_sub_temp_2 <= iA_2 - resize((iA_2 srl 1) * 2, 8);
  p72_cast_2 <= p72_sub_temp_2(0);
  
  p72_sub_cast_2 <= to_unsigned(2#0010#, 4) WHEN p72_cast_2 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p72_sub_temp_3 <= p72_sub_cast_2 - 1;
  
  p72_tmp_4 <= signed(p72_sub_temp_3(1 DOWNTO 0)) WHEN p72_cast_1 = 0 ELSE
      diLatch;
  
  p72_tmp_5 <= p72_tmp_3 WHEN sentTrain_1 <= 89 ELSE
      p72_tmp_4;
  
  p72_tmp_6 <= p72_tmp WHEN sentTrain_1 <= 24 ELSE
      p72_tmp_5;
  
  tmp_68 <= p72_tmp_6 WHEN tmp_67 = '1' ELSE
      diLatch;

  diLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diLatch <= to_signed(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        diLatch <= tmp_68;
      END IF;
    END IF;
  END PROCESS diLatch_reg_process;


  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_6 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_6 <= iA_4;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  fmo_1 <= to_signed(2#00#, 2);

  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_1_1 <= to_signed(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_1_1 <= fmo_1;
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;


  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_2 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_2 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_5 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_5 <= count_1;
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;


  
  tmp_69 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_70 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_70 <= tmp_69;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_7 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_7 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;


  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_2 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_2 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;


  a <= tx_fifo_unsigned & '0';

  c <= a srl 1;

  tmp_71 <= c(8 DOWNTO 1);

  a_1 <= tx_fifo_unsigned & '0' & '0';

  c_1 <= a_1 srl 2;

  tmp_72 <= c_1(9 DOWNTO 2);

  a_2 <= tx_fifo_unsigned & '0' & '0' & '0';

  c_2 <= a_2 srl 3;

  tmp_73 <= c_2(10 DOWNTO 3);

  a_3 <= tx_fifo_unsigned & '0' & '0' & '0' & '0';

  c_3 <= a_3 srl 4;

  tmp_74 <= c_3(11 DOWNTO 4);

  a_4 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0';

  c_4 <= a_4 srl 5;

  tmp_75 <= c_4(12 DOWNTO 5);

  a_5 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0';

  c_5 <= a_5 srl 6;

  tmp_76 <= c_5(13 DOWNTO 6);

  a_6 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  c_6 <= a_6 srl 7;

  tmp_77 <= c_6(14 DOWNTO 7);

  p94_output : PROCESS (sym2_2, tx_fifo_unsigned, tmp_71, tmp_72, tmp_73, tmp_74, tmp_75, tmp_76,
       tmp_77)
    VARIABLE tmp78 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp1 : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp1 := resize(sym2_2, 4) + 2;

    CASE add_temp1 IS
      WHEN "0001" =>
        tmp78 := tx_fifo_unsigned;
      WHEN "0010" =>
        tmp78 := tmp_71;
      WHEN "0011" =>
        tmp78 := tmp_72;
      WHEN "0100" =>
        tmp78 := tmp_73;
      WHEN "0101" =>
        tmp78 := tmp_74;
      WHEN "0110" =>
        tmp78 := tmp_75;
      WHEN "0111" =>
        tmp78 := tmp_76;
      WHEN "1000" =>
        tmp78 := tmp_77;
      WHEN OTHERS => 
        tmp78 := to_unsigned(2#00000000#, 8);
    END CASE;

    tmp_79 <= tmp78;
  END PROCESS p94_output;


  iA_8 <= tmp_79;

  
  tmp_80 <= '1' WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_29 = '0') ELSE
      '0';

  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_81 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_81 <= tmp_80;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  delayMatch_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_9 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_9 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_18_process;


  iA_10 <= sentTrain;

  delayMatch_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_11 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_11 <= iA_10;
      END IF;
    END IF;
  END PROCESS delayMatch_19_process;


  delayMatch_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_3 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_3 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_20_process;


  delayMatch_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_6 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_6 <= count_1;
      END IF;
    END IF;
  END PROCESS delayMatch_21_process;


  p69_sub_temp_1 <= resize((iA_11 - resize((iA_11 srl 1) * 2, 8)) * to_unsigned(2#10#, 2), 11) - 1;
  
  p69_tmp <= signed(p69_sub_temp_1(1 DOWNTO 0)) WHEN count_6 = 0 ELSE
      dqLatch;
  p69_sub_temp_4 <= resize(sentTrain_3, 9) - 24;
  p69_sub_cast_3 <= signed(resize(p69_sub_temp_4, 32));
  p69_tmp_1 <= p69_sub_cast_3 - 1;
  
  p69_tmp_2 <= to_signed(16#00000000#, 32) WHEN p69_tmp_1 < 0 ELSE
      p69_tmp_1;
  
  p69_tmp_3 <= tbq(to_integer(p69_tmp_2)) WHEN count_6 = 0 ELSE
      dqLatch;
  p69_1 <= iA_9 srl 3;
  p69_cast <= signed(resize(p69_1, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p69_mul_temp <= resize(p69_cast & '0' & '0' & '0', 41);
  p69_sub_cast <= p69_mul_temp(31 DOWNTO 0);
  p69_sub_cast_1 <= unsigned(p69_sub_cast(7 DOWNTO 0));
  p69_sub_temp <= iA_9 - p69_sub_cast_1;
  
  p69_cast_1 <= "111111" WHEN p69_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p69_sub_temp(5 DOWNTO 0);
  p69_sub_temp_2 <= iA_8 - resize((iA_8 srl 1) * 2, 8);
  p69_cast_2 <= p69_sub_temp_2(0);
  
  p69_sub_cast_2 <= to_unsigned(2#0010#, 4) WHEN p69_cast_2 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p69_sub_temp_3 <= p69_sub_cast_2 - 1;
  
  p69_tmp_4 <= signed(p69_sub_temp_3(1 DOWNTO 0)) WHEN p69_cast_1 = 0 ELSE
      dqLatch;
  
  p69_tmp_5 <= p69_tmp_3 WHEN sentTrain_3 <= 89 ELSE
      p69_tmp_4;
  
  p69_tmp_6 <= p69_tmp WHEN sentTrain_3 <= 24 ELSE
      p69_tmp_5;
  
  tmp_82 <= p69_tmp_6 WHEN tmp_81 = '1' ELSE
      dqLatch;

  dqLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dqLatch <= to_signed(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dqLatch <= tmp_82;
      END IF;
    END IF;
  END PROCESS dqLatch_reg_process;


  delayMatch_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_12 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_12 <= iA_10;
      END IF;
    END IF;
  END PROCESS delayMatch_22_process;


  fmo_2 <= to_signed(2#00#, 2);

  delayMatch_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_2_1 <= to_signed(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_2_1 <= fmo_2;
      END IF;
    END IF;
  END PROCESS delayMatch_23_process;


  delayMatch_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_4 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_4 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_24_process;


  delayMatch_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_7 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_7 <= count_1;
      END IF;
    END IF;
  END PROCESS delayMatch_25_process;


  p62_sub_temp_1 <= resize((iA_6 - resize((iA_6 srl 1) * 2, 8)) * to_unsigned(2#10#, 2), 11) - 1;
  
  p62_tmp <= signed(p62_sub_temp_1(1 DOWNTO 0)) WHEN count_5 = 0 ELSE
      diLatch;
  p62_sub_temp_4 <= resize(sentTrain_2, 9) - 24;
  p62_sub_cast_3 <= signed(resize(p62_sub_temp_4, 32));
  p62_tmp_1 <= p62_sub_cast_3 - 1;
  
  p62_tmp_2 <= to_signed(16#00000000#, 32) WHEN p62_tmp_1 < 0 ELSE
      p62_tmp_1;
  
  p62_tmp_3 <= tbi_2(to_integer(p62_tmp_2)) WHEN count_5 = 0 ELSE
      diLatch;
  p62_1 <= iA_1 srl 3;
  p62_cast <= signed(resize(p62_1, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p62_mul_temp <= resize(p62_cast & '0' & '0' & '0', 41);
  p62_sub_cast <= p62_mul_temp(31 DOWNTO 0);
  p62_sub_cast_1 <= unsigned(p62_sub_cast(7 DOWNTO 0));
  p62_sub_temp <= iA_1 - p62_sub_cast_1;
  
  p62_cast_1 <= "111111" WHEN p62_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p62_sub_temp(5 DOWNTO 0);
  p62_sub_temp_2 <= iA_2 - resize((iA_2 srl 1) * 2, 8);
  p62_cast_2 <= p62_sub_temp_2(0);
  
  p62_sub_cast_2 <= to_unsigned(2#0010#, 4) WHEN p62_cast_2 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p62_sub_temp_3 <= p62_sub_cast_2 - 1;
  
  p62_tmp_4 <= signed(p62_sub_temp_3(1 DOWNTO 0)) WHEN p62_cast_1 = 0 ELSE
      diLatch;
  
  p62_tmp_5 <= p62_tmp_3 WHEN sentTrain_2 <= 89 ELSE
      p62_tmp_4;
  
  p62_tmp_6 <= p62_tmp WHEN sentTrain_2 <= 24 ELSE
      p62_tmp_5;
  
  tmp_83 <= p62_tmp_6 WHEN tmp_47 = '1' ELSE
      fmo_1_1;

  p60_sub_temp_1 <= resize((iA_12 - resize((iA_12 srl 1) * 2, 8)) * to_unsigned(2#10#, 2), 11) - 1;
  
  p60_tmp <= signed(p60_sub_temp_1(1 DOWNTO 0)) WHEN count_7 = 0 ELSE
      dqLatch;
  p60_sub_temp_4 <= resize(sentTrain_4, 9) - 24;
  p60_sub_cast_3 <= signed(resize(p60_sub_temp_4, 32));
  p60_tmp_1 <= p60_sub_cast_3 - 1;
  
  p60_tmp_2 <= to_signed(16#00000000#, 32) WHEN p60_tmp_1 < 0 ELSE
      p60_tmp_1;
  
  p60_tmp_3 <= tbq_2(to_integer(p60_tmp_2)) WHEN count_7 = 0 ELSE
      dqLatch;
  p60_1 <= iA_7 srl 3;
  p60_cast <= signed(resize(p60_1, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p60_mul_temp <= resize(p60_cast & '0' & '0' & '0', 41);
  p60_sub_cast <= p60_mul_temp(31 DOWNTO 0);
  p60_sub_cast_1 <= unsigned(p60_sub_cast(7 DOWNTO 0));
  p60_sub_temp <= iA_7 - p60_sub_cast_1;
  
  p60_cast_1 <= "111111" WHEN p60_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p60_sub_temp(5 DOWNTO 0);
  p60_sub_temp_2 <= iA_8 - resize((iA_8 srl 1) * 2, 8);
  p60_cast_2 <= p60_sub_temp_2(0);
  
  p60_sub_cast_2 <= to_unsigned(2#0010#, 4) WHEN p60_cast_2 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p60_sub_temp_3 <= p60_sub_cast_2 - 1;
  
  p60_tmp_4 <= signed(p60_sub_temp_3(1 DOWNTO 0)) WHEN p60_cast_1 = 0 ELSE
      dqLatch;
  
  p60_tmp_5 <= p60_tmp_3 WHEN sentTrain_4 <= 89 ELSE
      p60_tmp_4;
  
  p60_tmp_6 <= p60_tmp WHEN sentTrain_4 <= 24 ELSE
      p60_tmp_5;
  
  tmp_84 <= p60_tmp_6 WHEN tmp_70 = '1' ELSE
      fmo_2_1;

  byte_out_re <= tmp_83;
  byte_out_im <= tmp_84;

  buf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      buf_re_1 <= (OTHERS => to_signed(2#00#, 2));
      buf_im_1 <= (OTHERS => to_signed(2#00#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        buf_re_1 <= buf_re;
        buf_im_1 <= buf_im;
      END IF;
    END IF;
  END PROCESS buf_reg_process;



  tmp_im_gen: FOR t_01 IN 0 TO 15 GENERATE
    tmp_re(t_01) <= buf_re_1(to_integer(tmp_1(t_01)));
    tmp_im(t_01) <= buf_im_1(to_integer(tmp_1(t_01)));
  END GENERATE tmp_im_gen;


  tmp_re_1(0 TO 15) <= tmp_re(0 TO 15);
  tmp_im_1(0 TO 15) <= tmp_im(0 TO 15);
  tmp_re_1(16) <= byte_out_re;
  tmp_im_1(16) <= byte_out_im;

  buf_re <= tmp_re_1;
  buf_im <= tmp_im_1;

  p31_output : PROCESS (c_re_1, c_im_1, buf_re, buf_im)
    VARIABLE c_im1 : signed(20 DOWNTO 0);
    VARIABLE c_im_0 : signed(20 DOWNTO 0);
    VARIABLE c_re1 : signed(20 DOWNTO 0);
    VARIABLE c_re_0 : signed(20 DOWNTO 0);
    VARIABLE c_re_11 : signed(20 DOWNTO 0);
    VARIABLE c_im_11 : signed(20 DOWNTO 0);
    VARIABLE add_cast : vector_of_signed22(0 TO 16);
    VARIABLE mul_temp : vector_of_signed16(0 TO 16);
    VARIABLE add_cast_0 : vector_of_signed22(0 TO 16);
    VARIABLE add_temp2 : vector_of_signed22(0 TO 16);
    VARIABLE add_cast_1 : vector_of_signed22(0 TO 16);
    VARIABLE mul_temp_0 : vector_of_signed16(0 TO 16);
    VARIABLE add_cast_2 : vector_of_signed22(0 TO 16);
    VARIABLE add_temp_0 : vector_of_signed22(0 TO 16);
  BEGIN
    c_re_0 := c_re_1;
    c_re1 := c_re_1;
    c_im_0 := c_im_1;
    c_im1 := c_im_1;

    FOR k IN 0 TO 16 LOOP
      add_cast(k) := resize(c_re1, 22);
      mul_temp(k) := buf_re(k) * nc(k);
      add_cast_0(k) := resize(mul_temp(k), 22);
      add_temp2(k) := add_cast(k) + add_cast_0(k);
      c_re_11 := add_temp2(k)(20 DOWNTO 0);
      add_cast_1(k) := resize(c_im1, 22);
      mul_temp_0(k) := buf_im(k) * nc(k);
      add_cast_2(k) := resize(mul_temp_0(k), 22);
      add_temp_0(k) := add_cast_1(k) + add_cast_2(k);
      c_im_11 := add_temp_0(k)(20 DOWNTO 0);
      c_re_0 := c_re_11;
      c_re1 := c_re_11;
      c_im_0 := c_im_11;
      c_im1 := c_im_11;
    END LOOP;

    c_re_2 <= c_re_0;
    c_im_2 <= c_im_0;
  END PROCESS p31_output;


  p30d_ssrc_cast <= c_re_2(14 DOWNTO 1);
  d_ssrc_re <= p30d_ssrc_cast(13 DOWNTO 1);
  p30d_ssrc_cast_1 <= c_im_2(14 DOWNTO 1);
  d_ssrc_im <= p30d_ssrc_cast_1(13 DOWNTO 1);

  -- make i/q discrete ports and scale to the full 12-bit range of the DAC
  -- (one bit is for sign)
  a0 <= d_ssrc_re;

  p25tmp_cast <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  p25tmp_cast_1 <= p25tmp_cast(24 DOWNTO 0);
  
  tmp_85 <= '1' WHEN p25tmp_cast_1 < 0 ELSE
      '0';

  p28c_cast <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  c_7 <= p28c_cast(24 DOWNTO 0);

  p26tmp_add_cast <= resize(c_7(24 DOWNTO 11), 15);
  p26tmp_add_temp <= p26tmp_add_cast + 1;
  tmp_86 <= p26tmp_add_temp(14 DOWNTO 1);

  p27tmp_sub_cast <= (resize(c_7(24 DOWNTO 11), 15)) + ('0' & (c_7(10) OR c_7(9) OR c_7(8) OR c_7(7) OR c_7(6) OR c_7(5) OR c_7(4) OR c_7(3) OR c_7(2) OR c_7(1) OR c_7(0)));
  p27tmp_sub_temp <= p27tmp_sub_cast - 1;
  p27tmp_cast <= (resize(p27tmp_sub_temp(14 DOWNTO 1), 15)) + ('0' & p27tmp_sub_temp(0));
  tmp_87 <= p27tmp_cast(13 DOWNTO 0);

  
  tmp_88 <= tmp_86 WHEN tmp_85 = '0' ELSE
      tmp_87;

  i_out_1 <= tmp_88(11 DOWNTO 0);

  delayMatch_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_out_tmp <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_out_tmp <= i_out_1;
      END IF;
    END IF;
  END PROCESS delayMatch_26_process;


  i_out <= std_logic_vector(i_out_tmp);

  a0_1 <= d_ssrc_im;

  p18tmp_cast <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  p18tmp_cast_1 <= p18tmp_cast(24 DOWNTO 0);
  
  tmp_89 <= '1' WHEN p18tmp_cast_1 < 0 ELSE
      '0';

  p21c_cast <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  c_8 <= p21c_cast(24 DOWNTO 0);

  p19tmp_add_cast <= resize(c_8(24 DOWNTO 11), 15);
  p19tmp_add_temp <= p19tmp_add_cast + 1;
  tmp_90 <= p19tmp_add_temp(14 DOWNTO 1);

  p20tmp_sub_cast <= (resize(c_8(24 DOWNTO 11), 15)) + ('0' & (c_8(10) OR c_8(9) OR c_8(8) OR c_8(7) OR c_8(6) OR c_8(5) OR c_8(4) OR c_8(3) OR c_8(2) OR c_8(1) OR c_8(0)));
  p20tmp_sub_temp <= p20tmp_sub_cast - 1;
  p20tmp_cast <= (resize(p20tmp_sub_temp(14 DOWNTO 1), 15)) + ('0' & p20tmp_sub_temp(0));
  tmp_91 <= p20tmp_cast(13 DOWNTO 0);

  
  tmp_92 <= tmp_90 WHEN tmp_89 = '0' ELSE
      tmp_91;

  q_out_1 <= tmp_92(11 DOWNTO 0);

  delayMatch_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_out_tmp <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_out_tmp <= q_out_1;
      END IF;
    END IF;
  END PROCESS delayMatch_27_process;


  q_out <= std_logic_vector(q_out_tmp);

  tmp_93 <= tmp_45;

  tx_done <= tmp_93;

  tx_done_out_1 <= tx_done;

  tx_done_out_2 <= tx_done_out_1;

  delayMatch_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= tx_done_out_2;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_28_process;

  tx_done_out <= delayMatch_reg(1);

  
  tmp_94 <= '1' WHEN (empty_in = '0') AND (tmp_6 = 0) ELSE
      '0';

  fmo_3 <= '0';

  
  tmp_95 <= '1' WHEN tmp_94 = '1' ELSE
      fmo_3;

  request_byte_1 <= tmp_95;

  request_byte_2 <= request_byte_1;

  delayMatch_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_1(0) <= request_byte_2;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_29_process;

  request_byte <= delayMatch_reg_1(1);

  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt <= tmp_96;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;


  blinky_cnt_1 <= blinky_cnt + 1;

  
  tmp_97 <= '1' WHEN blinky_cnt_1 = 20000000 ELSE
      '0';

  
  tmp_96 <= to_unsigned(2#0000000000000000000000000#, 25) WHEN tmp_97 = '1' ELSE
      blinky_cnt_1;

  p165blinky_mul_temp <= tmp_96 * to_unsigned(2#11010110101111#, 14);
  p165blinky_cast <= p165blinky_mul_temp(38 DOWNTO 37);
  blinky_1 <= p165blinky_cast(0);

  blinky_2 <= blinky_1;

  delayMatch_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_2(0) <= blinky_2;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_30_process;

  blinky <= delayMatch_reg_2(1);

  ce_out <= ce;

END rtl;

