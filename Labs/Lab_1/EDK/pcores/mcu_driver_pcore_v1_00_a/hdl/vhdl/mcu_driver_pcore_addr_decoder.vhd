-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\QPSK_Pcore\Labs\Lab_1\MATLAB\codegen\mcu_driver\hdlsrc\mcu_driver_pcore_addr_decoder.vhd
-- Created: 2013-12-11 15:35:19
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mcu_driver_pcore_addr_decoder
-- Source Path: mcu_driver_pcore/mcu_driver_pcore_axi_lite/mcu_driver_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mcu_driver_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_init_done_reg                :   IN    std_logic;  -- ufix1
        read_latch_done                   :   IN    std_logic;  -- ufix1
        read_reg_reset_done               :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_mcu_reset_in                :   OUT   std_logic;  -- ufix1
        write_tr_sw_reg                   :   OUT   std_logic;  -- ufix1
        write_pa_en_reg                   :   OUT   std_logic;  -- ufix1
        write_tx_en_reg                   :   OUT   std_logic;  -- ufix1
        write_rx_en_reg                   :   OUT   std_logic;  -- ufix1
        write_latch                       :   OUT   std_logic;  -- ufix1
        write_mcu_reg_reset               :   OUT   std_logic  -- ufix1
        );
END mcu_driver_pcore_addr_decoder;


ARCHITECTURE rtl OF mcu_driver_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_init_done_reg         : std_logic;  -- ufix1
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_reg_reset_done        : std_logic;  -- ufix1
  SIGNAL decode_sel_latch_done            : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_init_done_reg           : std_logic;  -- ufix1
  SIGNAL data_in_init_done_reg            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_init_done_reg          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_latch_done              : std_logic;  -- ufix1
  SIGNAL data_in_latch_done               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_latch_done             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_reg_reset_done          : std_logic;  -- ufix1
  SIGNAL data_in_reg_reset_done           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_reg_reset_done         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL data_in_mcu_reset_in             : std_logic;  -- ufix1
  SIGNAL decode_sel_mcu_reset_in          : std_logic;  -- ufix1
  SIGNAL reg_enb_mcu_reset_in             : std_logic;  -- ufix1
  SIGNAL write_reg_mcu_reset_in           : std_logic;  -- ufix1
  SIGNAL data_in_tr_sw_reg                : std_logic;  -- ufix1
  SIGNAL decode_sel_tr_sw_reg             : std_logic;  -- ufix1
  SIGNAL reg_enb_tr_sw_reg                : std_logic;  -- ufix1
  SIGNAL write_reg_tr_sw_reg              : std_logic;  -- ufix1
  SIGNAL data_in_pa_en_reg                : std_logic;  -- ufix1
  SIGNAL decode_sel_pa_en_reg             : std_logic;  -- ufix1
  SIGNAL reg_enb_pa_en_reg                : std_logic;  -- ufix1
  SIGNAL write_reg_pa_en_reg              : std_logic;  -- ufix1
  SIGNAL data_in_tx_en_reg                : std_logic;  -- ufix1
  SIGNAL decode_sel_tx_en_reg             : std_logic;  -- ufix1
  SIGNAL reg_enb_tx_en_reg                : std_logic;  -- ufix1
  SIGNAL write_reg_tx_en_reg              : std_logic;  -- ufix1
  SIGNAL data_in_rx_en_reg                : std_logic;  -- ufix1
  SIGNAL decode_sel_rx_en_reg             : std_logic;  -- ufix1
  SIGNAL reg_enb_rx_en_reg                : std_logic;  -- ufix1
  SIGNAL write_reg_rx_en_reg              : std_logic;  -- ufix1
  SIGNAL data_in_latch                    : std_logic;  -- ufix1
  SIGNAL decode_sel_latch                 : std_logic;  -- ufix1
  SIGNAL reg_enb_latch                    : std_logic;  -- ufix1
  SIGNAL write_reg_latch                  : std_logic;  -- ufix1
  SIGNAL data_in_mcu_reg_reset            : std_logic;  -- ufix1
  SIGNAL decode_sel_mcu_reg_reset         : std_logic;  -- ufix1
  SIGNAL reg_enb_mcu_reg_reset            : std_logic;  -- ufix1
  SIGNAL write_reg_mcu_reg_reset          : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_init_done_reg <= '1' WHEN addr_sel_unsigned = 71 ELSE
      '0';

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_reg_reset_done <= '1' WHEN addr_sel_unsigned = 73 ELSE
      '0';

  
  decode_sel_latch_done <= '1' WHEN addr_sel_unsigned = 72 ELSE
      '0';

  const_z <= (OTHERS => 'Z');


  reg_init_done_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_init_done_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_init_done_reg <= read_init_done_reg;
      END IF;
    END IF;
  END PROCESS reg_init_done_reg_process;


  data_in_init_done_reg <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_init_done_reg;

  
  decode_rd_init_done_reg <= const_z WHEN decode_sel_init_done_reg = '0' ELSE
      data_in_init_done_reg;

  reg_latch_done_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_latch_done <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_latch_done <= read_latch_done;
      END IF;
    END IF;
  END PROCESS reg_latch_done_process;


  data_in_latch_done <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_latch_done;

  
  decode_rd_latch_done <= decode_rd_init_done_reg WHEN decode_sel_latch_done = '0' ELSE
      data_in_latch_done;

  reg_reg_reset_done_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_reg_reset_done <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_reg_reset_done <= read_reg_reset_done;
      END IF;
    END IF;
  END PROCESS reg_reg_reset_done_process;


  data_in_reg_reset_done <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_reg_reset_done;

  
  decode_rd_reg_reset_done <= decode_rd_latch_done WHEN decode_sel_reg_reset_done = '0' ELSE
      data_in_reg_reset_done;

  data_read <= std_logic_vector(decode_rd_reg_reset_done);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = 1 ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  data_in_mcu_reset_in <= data_write_unsigned(0);

  
  decode_sel_mcu_reset_in <= '1' WHEN addr_sel_unsigned = 64 ELSE
      '0';

  reg_enb_mcu_reset_in <= decode_sel_mcu_reset_in AND wr_enb;

  reg_mcu_reset_in_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_mcu_reset_in <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_mcu_reset_in = '1' THEN
        write_reg_mcu_reset_in <= data_in_mcu_reset_in;
      END IF;
    END IF;
  END PROCESS reg_mcu_reset_in_process;


  write_mcu_reset_in <= write_reg_mcu_reset_in;

  data_in_tr_sw_reg <= data_write_unsigned(0);

  
  decode_sel_tr_sw_reg <= '1' WHEN addr_sel_unsigned = 65 ELSE
      '0';

  reg_enb_tr_sw_reg <= decode_sel_tr_sw_reg AND wr_enb;

  reg_tr_sw_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_tr_sw_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_tr_sw_reg = '1' THEN
        write_reg_tr_sw_reg <= data_in_tr_sw_reg;
      END IF;
    END IF;
  END PROCESS reg_tr_sw_reg_process;


  write_tr_sw_reg <= write_reg_tr_sw_reg;

  data_in_pa_en_reg <= data_write_unsigned(0);

  
  decode_sel_pa_en_reg <= '1' WHEN addr_sel_unsigned = 66 ELSE
      '0';

  reg_enb_pa_en_reg <= decode_sel_pa_en_reg AND wr_enb;

  reg_pa_en_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_pa_en_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_pa_en_reg = '1' THEN
        write_reg_pa_en_reg <= data_in_pa_en_reg;
      END IF;
    END IF;
  END PROCESS reg_pa_en_reg_process;


  write_pa_en_reg <= write_reg_pa_en_reg;

  data_in_tx_en_reg <= data_write_unsigned(0);

  
  decode_sel_tx_en_reg <= '1' WHEN addr_sel_unsigned = 67 ELSE
      '0';

  reg_enb_tx_en_reg <= decode_sel_tx_en_reg AND wr_enb;

  reg_tx_en_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_tx_en_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_tx_en_reg = '1' THEN
        write_reg_tx_en_reg <= data_in_tx_en_reg;
      END IF;
    END IF;
  END PROCESS reg_tx_en_reg_process;


  write_tx_en_reg <= write_reg_tx_en_reg;

  data_in_rx_en_reg <= data_write_unsigned(0);

  
  decode_sel_rx_en_reg <= '1' WHEN addr_sel_unsigned = 68 ELSE
      '0';

  reg_enb_rx_en_reg <= decode_sel_rx_en_reg AND wr_enb;

  reg_rx_en_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_rx_en_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_rx_en_reg = '1' THEN
        write_reg_rx_en_reg <= data_in_rx_en_reg;
      END IF;
    END IF;
  END PROCESS reg_rx_en_reg_process;


  write_rx_en_reg <= write_reg_rx_en_reg;

  data_in_latch <= data_write_unsigned(0);

  
  decode_sel_latch <= '1' WHEN addr_sel_unsigned = 69 ELSE
      '0';

  reg_enb_latch <= decode_sel_latch AND wr_enb;

  reg_latch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_latch <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_latch = '1' THEN
        write_reg_latch <= data_in_latch;
      END IF;
    END IF;
  END PROCESS reg_latch_process;


  write_latch <= write_reg_latch;

  data_in_mcu_reg_reset <= data_write_unsigned(0);

  
  decode_sel_mcu_reg_reset <= '1' WHEN addr_sel_unsigned = 70 ELSE
      '0';

  reg_enb_mcu_reg_reset <= decode_sel_mcu_reg_reset AND wr_enb;

  reg_mcu_reg_reset_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_mcu_reg_reset <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_mcu_reg_reset = '1' THEN
        write_reg_mcu_reg_reset <= data_in_mcu_reg_reset;
      END IF;
    END IF;
  END PROCESS reg_mcu_reg_reset_process;


  write_mcu_reg_reset <= write_reg_mcu_reg_reset;

END rtl;

