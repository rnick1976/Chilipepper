-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\QPSK_Pcore\Labs\Lab_8\MATLAB\codegen\dc_offset_correction\hdlsrc\dc_offset_correction_fixpt.vhd
-- Created: 2013-12-31 17:34:18
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- rssi_out                      ce_out        1
-- rssi_en_out                   ce_out        1
-- dir_out                       ce_out        1
-- dir_en_out                    ce_out        1
-- blinky                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_correction_fixpt
-- Source Path: dc_offset_correction_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dc_offset_correction_fixpt_pkg.ALL;

ENTITY dc_offset_correction_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_high_goal_in                 :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rx_en_in                          :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_en_out                       :   OUT   std_logic;  -- ufix1
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        dir_en_out                        :   OUT   std_logic;  -- ufix1
        blinky                            :   OUT   std_logic  -- ufix1
        );
END dc_offset_correction_fixpt;


ARCHITECTURE rtl OF dc_offset_correction_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rx_en_in_1                       : std_logic;  -- ufix1
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p189tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p189tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_3                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_4                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_5                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_6                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p190tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p190tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_7                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_8                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_9                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p195tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p195tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_10                           : std_logic;
  SIGNAL tmp_11                           : std_logic;
  SIGNAL tmp_12                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p168tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p168tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_15                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_16                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_17                           : std_logic;
  SIGNAL tmp_18                           : std_logic;
  SIGNAL tmp_19                           : std_logic;
  SIGNAL q_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_20                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p192tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p192tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_21                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_22                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_23                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_24                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p193tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p193tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_25                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_26                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_27                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_28                           : std_logic;
  SIGNAL tmp_29                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p166tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p166tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_30                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_31                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_32                           : std_logic;
  SIGNAL tmp_33                           : std_logic;
  SIGNAL tmp_34                           : std_logic;
  SIGNAL noise_offset                     : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_35                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_36                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL noise_inc                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_37                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p181_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p181_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p181_tmp_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p181_tmp_3                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p181_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p181_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p181_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p181_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p181_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p181_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p181_cast_5                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p181_cast_6                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p181_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p181_cast_7                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_38                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_39                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_40                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL noise_dec                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_41                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p183_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p183_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p183_tmp_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p183_tmp_3                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p183_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p183_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p183_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p183_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_cast_5                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_cast_6                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p183_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p183_cast_7                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_42                           : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL alpha_1_cast                     : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL alpha_1_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL alpha_relop1                     : std_logic;
  SIGNAL tmp_43                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p186_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp_2                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp_3                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p186_tmp_4                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp_5                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp_6                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp_7                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p186_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_5                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_6                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p186_cast_7                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_44                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_45                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_46                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p196tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p196tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_47                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_48                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL i_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p176_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p176_tmp_1                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p176_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p176_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p176_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p176_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p176_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p164i_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p164i_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p164i_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL rd_38_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_49                           : std_logic;
  SIGNAL tmp_50                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p198tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p198tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_51                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_52                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_53                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p199tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p199tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_54                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_55                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL q_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179_tmp_1                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p179_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p179_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p179_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p179_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p163q_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p163q_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p163q_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL rd_27_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_56                           : std_logic;
  SIGNAL rd_66_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_57                           : std_logic;
  SIGNAL tmp_58                           : std_logic;
  SIGNAL tmp_59                           : std_logic;
  SIGNAL i_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_60                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_61                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_62                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_63                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_64                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL rssi_inst                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_65                           : std_logic;
  SIGNAL tmp_66                           : std_logic;
  SIGNAL tmp_67                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_68                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p127_tmp                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_69                           : std_logic;
  SIGNAL tmp_70                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter_1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_71                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_72                           : std_logic;
  SIGNAL tmp_73                           : std_logic;
  SIGNAL tmp_74                           : std_logic;
  SIGNAL tmp_75                           : std_logic;
  SIGNAL tmp_76                           : std_logic;
  SIGNAL tmp_77                           : std_logic;
  SIGNAL tmp_78                           : std_logic;
  SIGNAL tmp_79                           : std_logic;
  SIGNAL tmp_80                           : std_logic;
  SIGNAL tmp_81                           : std_logic;
  SIGNAL tmp_82                           : std_logic;
  SIGNAL tmp_83                           : std_logic;
  SIGNAL tmp_84                           : std_logic;
  SIGNAL tmp_85                           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_86                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_87                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_88                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_89                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_sum                         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_90                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_91                           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_92                           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_93                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_out_1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_17_reg                        : vector_of_unsigned24(0 TO 2);  -- ufix24 [3]
  SIGNAL rssi_out_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL counter_2                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_94                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p131_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p131_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p131_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p131_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p131_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p131_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_95                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_96                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_tmp                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_97                           : std_logic;
  SIGNAL tmp_98                           : std_logic;
  SIGNAL tmp_99                           : std_logic;
  SIGNAL tmp_100                          : std_logic;
  SIGNAL rssi_en_out_1                    : std_logic;  -- ufix1
  SIGNAL rd_10_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_2                    : std_logic;  -- ufix1
  SIGNAL tmp_101                          : std_logic;  -- ufix1
  SIGNAL p135_tmp                         : std_logic;  -- ufix1
  SIGNAL tmp_102                          : std_logic;  -- ufix1
  SIGNAL tmp_103                          : std_logic;  -- ufix1
  SIGNAL rssi_en_out_3                    : std_logic;  -- ufix1
  SIGNAL rssi_en_out_4                    : std_logic;  -- ufix1
  SIGNAL tmp_104                          : std_logic;
  SIGNAL rd_21_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_105                          : std_logic;
  SIGNAL tmp_106                          : std_logic;
  SIGNAL rd_65_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_107                          : std_logic;
  SIGNAL gain_en_in_1                     : std_logic;  -- ufix1
  SIGNAL gain_en_in_2                     : std_logic;  -- ufix1
  SIGNAL tmp_108                          : std_logic;
  SIGNAL tmp_109                          : std_logic;
  SIGNAL tmp_110                          : std_logic;
  SIGNAL tmp_111                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p204tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_112                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL ai                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_113                          : std_logic;
  SIGNAL tmp_114                          : std_logic;
  SIGNAL tmp_115                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p206tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_116                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL aq                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_117                          : std_logic;
  SIGNAL tmp_118                          : std_logic;
  SIGNAL rd_57_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_119                          : std_logic;
  SIGNAL tmp_120                          : std_logic;
  SIGNAL tmp_121                          : std_logic;
  SIGNAL tmp_122                          : std_logic;
  SIGNAL rd_33_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_123                          : std_logic;
  SIGNAL tmp_124                          : std_logic;
  SIGNAL tmp_125                          : std_logic;
  SIGNAL tmp_126                          : std_logic;
  SIGNAL tmp_127                          : std_logic;
  SIGNAL tmp_128                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssiHold                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_129                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p133_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p133_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p133_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p133_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p133_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p133_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_130                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_131                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_132                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_133                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_134                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_135                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL rd_50_reg                        : vector_of_signed49(0 TO 1);  -- sfix49 [2]
  SIGNAL tmp_136                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL c                                : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p83c_sub_cast                    : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p83c_sub_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_137                          : std_logic;
  SIGNAL tmp_138                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p82tmp_cast                      : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL p82tmp_cast_1                    : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL tmp_139                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL rssi_diff                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_unsigned       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_7_reg                         : vector_of_unsigned24(0 TO 2);  -- ufix24 [3]
  SIGNAL rssi_high_goal_in_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1_1                   : std_logic;
  SIGNAL rssi_low_goal_in_unsigned        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_6_reg                         : vector_of_unsigned24(0 TO 2);  -- ufix24 [3]
  SIGNAL rssi_low_goal_in_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1_2                   : std_logic;
  SIGNAL tmp_140                          : std_logic;
  SIGNAL tmp_141                          : std_logic;
  SIGNAL tmp_142                          : std_logic;  -- ufix1
  SIGNAL tmp_143                          : std_logic;  -- ufix1
  SIGNAL tmp_144                          : std_logic;  -- ufix1
  SIGNAL tmp_145                          : std_logic;  -- ufix1
  SIGNAL tmp_146                          : std_logic;  -- ufix1
  SIGNAL tmp_147                          : std_logic;  -- ufix1
  SIGNAL tmp_148                          : std_logic;  -- ufix1
  SIGNAL tmp_149                          : std_logic;  -- ufix1
  SIGNAL tmp_150                          : std_logic;  -- ufix1
  SIGNAL tmp_151                          : std_logic;  -- ufix1
  SIGNAL tmp_152                          : std_logic;  -- ufix1
  SIGNAL tmp_154                          : std_logic;  -- ufix1
  SIGNAL tmp_155                          : std_logic;  -- ufix1
  SIGNAL tmp_156                          : std_logic;  -- ufix1
  SIGNAL tmp_157                          : std_logic;  -- ufix1
  SIGNAL tmp_158                          : std_logic;
  SIGNAL tmp_159                          : std_logic;
  SIGNAL tmp_160                          : std_logic;
  SIGNAL tmp_161                          : std_logic;
  SIGNAL rd_62_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_162                          : std_logic;
  SIGNAL tmp_163                          : std_logic;
  SIGNAL alpha_relop1_3                   : std_logic;
  SIGNAL alpha_relop1_4                   : std_logic;
  SIGNAL dir_out_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_1_reg                         : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_3                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_164                          : std_logic;
  SIGNAL tmp_165                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_166                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_167                          : std_logic;
  SIGNAL tmp_168                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_169                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_170                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_171                          : std_logic;
  SIGNAL tmp_172                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_25_reg                        : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL tmp_173                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_175                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_176                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_tmp                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_177                          : std_logic;
  SIGNAL rd_23_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_178                          : std_logic;
  SIGNAL tmp_179                          : std_logic;  -- ufix1
  SIGNAL tmp_180                          : std_logic;  -- ufix1
  SIGNAL tmp_181                          : std_logic;
  SIGNAL tmp_182                          : std_logic;
  SIGNAL tmp_183                          : std_logic;
  SIGNAL tmp_184                          : std_logic;
  SIGNAL rd_61_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_185                          : std_logic;
  SIGNAL tmp_186                          : std_logic;
  SIGNAL alpha_relop1_5                   : std_logic;
  SIGNAL alpha_relop1_6                   : std_logic;
  SIGNAL dir_en_out_1                     : std_logic;  -- ufix1
  SIGNAL dir_en_out_2                     : std_logic;  -- ufix1
  SIGNAL rd_4_reg                         : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_3                     : std_logic;  -- ufix1
  SIGNAL tmp_187                          : std_logic;
  SIGNAL tmp_188                          : std_logic;  -- ufix1
  SIGNAL tmp_189                          : std_logic;  -- ufix1
  SIGNAL tmp_190                          : std_logic;
  SIGNAL tmp_191                          : std_logic;  -- ufix1
  SIGNAL tmp_192                          : std_logic;  -- ufix1
  SIGNAL tmp_193                          : std_logic;  -- ufix1
  SIGNAL tmp_194                          : std_logic;
  SIGNAL tmp_195                          : std_logic;  -- ufix1
  SIGNAL rd_60_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_196                          : std_logic;  -- ufix1
  SIGNAL tmp_198                          : std_logic;  -- ufix1
  SIGNAL tmp_199                          : std_logic;  -- ufix1
  SIGNAL dir_en_out_4                     : std_logic;  -- ufix1
  SIGNAL tmp_200                          : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt                       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL tmp_201                          : std_logic;
  SIGNAL tmp_202                          : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL tmp_203                          : unsigned(38 DOWNTO 0);  -- ufix39_En37
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL p210blinky_cast                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL blinky_2                         : std_logic;  -- ufix1
  SIGNAL rd_68_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]

BEGIN
  i_in_signed <= signed(i_in);

  enb <= clk_enable;

  rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_in_1 <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_in_1 <= i_in_signed;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rx_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rx_en_in_1 <= rx_en_in;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  
  tmp <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  
  tmp_1 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  p189tmp_cast <= resize(i_in_1, 25);
  p189tmp_cast_1 <= p189tmp_cast(23 DOWNTO 0);
  tmp_2 <= resize(p189tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_4 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_4 <= tmp_3;
      END IF;
    END IF;
  END PROCESS rd_49_process;


  
  tmp_3 <= tmp_5 WHEN tmp_1 = '1' ELSE
      tmp_4;

  p190tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_3;
  p190tmp_cast <= p190tmp_mul_temp(37 DOWNTO 0);
  tmp_6 <= resize(p190tmp_cast, 39);

  rd_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_7 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_7 <= tmp_6;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  tmp_8 <= tmp_7 + tmp_2;

  tmp_5 <= tmp_8(35 DOWNTO 12);

  p195tmp_cast <= resize(i_in_1, 25);
  p195tmp_cast_1 <= p195tmp_cast(23 DOWNTO 0);
  tmp_9 <= resize(p195tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --alpha = alpha_in/2^12;
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- DC Correction section
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  tmp_10 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_11 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_11 <= tmp_10;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  rd_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_12 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_12 <= tmp_5;
      END IF;
    END IF;
  END PROCESS rd_46_process;


  
  tmp_13 <= '1' WHEN tmp_3 < 0 ELSE
      '0';

  p168tmp_cast <= resize(tmp_3, 25);
  p168tmp_cast_1 <=  - (p168tmp_cast);
  tmp_14 <= p168tmp_cast_1(23 DOWNTO 0);

  
  tmp_15 <= tmp_3 WHEN tmp_13 = '0' ELSE
      tmp_14;

  rd_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_16 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_16 <= tmp_15;
      END IF;
    END IF;
  END PROCESS rd_47_process;


  
  tmp_17 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_18 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_18 <= tmp_17;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  
  tmp_19 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  q_in_signed <= signed(q_in);

  rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_in_1 <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_in_1 <= q_in_signed;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  p192tmp_cast <= resize(q_in_1, 25);
  p192tmp_cast_1 <= p192tmp_cast(23 DOWNTO 0);
  tmp_20 <= resize(p192tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_22 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_22 <= tmp_21;
      END IF;
    END IF;
  END PROCESS rd_52_process;


  
  tmp_21 <= tmp_23 WHEN tmp_19 = '1' ELSE
      tmp_22;

  p193tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_21;
  p193tmp_cast <= p193tmp_mul_temp(37 DOWNTO 0);
  tmp_24 <= resize(p193tmp_cast, 39);

  rd_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_25 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_25 <= tmp_24;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  tmp_26 <= tmp_25 + tmp_20;

  tmp_23 <= tmp_26(35 DOWNTO 12);

  rd_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_27 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_27 <= tmp_23;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  --correct false positive/nagatives
  
  tmp_28 <= '1' WHEN tmp_3 < 0 ELSE
      '0';

  p166tmp_cast <= resize(tmp_3, 25);
  p166tmp_cast_1 <=  - (p166tmp_cast);
  tmp_29 <= p166tmp_cast_1(23 DOWNTO 0);

  
  tmp_30 <= tmp_3 WHEN tmp_28 = '0' ELSE
      tmp_29;

  rd_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_31 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_31 <= tmp_30;
      END IF;
    END IF;
  END PROCESS rd_48_process;


  
  tmp_32 <= '1' WHEN tmp_31 < 204800 ELSE
      '0';

  
  tmp_33 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_34 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_34 <= tmp_33;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  --dc offset threshold is higher than needed
  tmp_35 <= noise_offset + 10;

  p181_cast <= resize(tmp_12, 25);
  p181_cast_1 <=  - (p181_cast);
  
  p181_tmp <= p181_cast_1(23 DOWNTO 0) WHEN tmp_12 < 0 ELSE
      tmp_12;
  p181_cast_2 <= resize(p181_tmp, 34);
  p181_add_temp <= 50 + resize(noise_offset, 21);
  p181_cast_3 <= signed(resize(p181_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p181_tmp_1 <= tmp_36 WHEN p181_cast_2 > p181_cast_3 ELSE
      noise_inc;
  p181_cast_4 <= resize(tmp_27, 25);
  p181_cast_5 <=  - (p181_cast_4);
  
  p181_tmp_2 <= p181_cast_5(23 DOWNTO 0) WHEN tmp_27 < 0 ELSE
      tmp_27;
  p181_cast_6 <= resize(p181_tmp_2, 34);
  p181_add_temp_1 <= 50 + resize(noise_offset, 21);
  p181_cast_7 <= signed(resize(p181_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p181_tmp_3 <= p181_tmp_1 + 1 WHEN p181_cast_6 > p181_cast_7 ELSE
      p181_tmp_1;
  
  tmp_37 <= to_unsigned(16#00000#, 20) WHEN tmp_34 = '1' AND (p181_tmp_3 > 10) ELSE
      p181_tmp_3 WHEN tmp_34 = '1' ELSE
      noise_inc;

  
  tmp_38 <= to_unsigned(16#00000#, 20) WHEN tmp_32 = '1' ELSE
      tmp_37;

  noise_inc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_inc <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_inc <= tmp_38;
      END IF;
    END IF;
  END PROCESS noise_inc_reg_process;


  --there is a high dc_offset value that needs to be corrected
  -- too much noise, raise cieling.
  tmp_36 <= noise_inc + 1;

  rd_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_offset <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_offset <= tmp_39;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  p183_cast <= resize(tmp_12, 25);
  p183_cast_1 <=  - (p183_cast);
  
  p183_tmp <= p183_cast_1(23 DOWNTO 0) WHEN tmp_12 < 0 ELSE
      tmp_12;
  p183_cast_2 <= resize(p183_tmp, 34);
  p183_add_temp <= 50 + resize(noise_offset, 21);
  p183_cast_3 <= signed(resize(p183_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p183_tmp_1 <= noise_dec WHEN p183_cast_2 > p183_cast_3 ELSE
      tmp_40;
  p183_cast_4 <= resize(tmp_27, 25);
  p183_cast_5 <=  - (p183_cast_4);
  
  p183_tmp_2 <= p183_cast_5(23 DOWNTO 0) WHEN tmp_27 < 0 ELSE
      tmp_27;
  p183_cast_6 <= resize(p183_tmp_2, 34);
  p183_add_temp_1 <= 50 + resize(noise_offset, 21);
  p183_cast_7 <= signed(resize(p183_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p183_tmp_3 <= p183_tmp_1 WHEN p183_cast_6 > p183_cast_7 ELSE
      p183_tmp_1 + 1;
  
  tmp_41 <= to_unsigned(16#00000#, 20) WHEN tmp_18 = '1' AND (p183_tmp_3 > 100000) ELSE
      p183_tmp_3 WHEN tmp_18 = '1' ELSE
      noise_dec;

  tmp_42 <= resize(tmp_39, 21) - 10;

  alpha_1_cast <= resize(tmp_16, 34);
  alpha_1_cast_1 <= signed(resize(tmp_42 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  alpha_relop1 <= '1' WHEN alpha_1_cast > alpha_1_cast_1 ELSE
      '0';

  
  tmp_43 <= to_unsigned(16#00000#, 20) WHEN alpha_relop1 = '1' ELSE
      tmp_41;

  noise_dec_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_dec <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_dec <= tmp_43;
      END IF;
    END IF;
  END PROCESS noise_dec_reg_process;


  -- too much noise, raise cieling.
  tmp_40 <= noise_dec + 1;

  p186_cast <= resize(tmp_12, 25);
  p186_cast_1 <=  - (p186_cast);
  
  p186_tmp <= p186_cast_1(23 DOWNTO 0) WHEN tmp_12 < 0 ELSE
      tmp_12;
  p186_cast_2 <= resize(p186_tmp, 34);
  p186_add_temp <= 50 + resize(noise_offset, 21);
  p186_cast_3 <= signed(resize(p186_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p186_tmp_2 <= tmp_36 WHEN p186_cast_2 > p186_cast_3 ELSE
      noise_inc;
  
  p186_tmp_1 <= noise_dec WHEN p186_cast_2 > p186_cast_3 ELSE
      tmp_40;
  p186_cast_4 <= resize(tmp_27, 25);
  p186_cast_5 <=  - (p186_cast_4);
  
  p186_tmp_3 <= p186_cast_5(23 DOWNTO 0) WHEN tmp_27 < 0 ELSE
      tmp_27;
  p186_cast_6 <= resize(p186_tmp_3, 34);
  p186_add_temp_1 <= 50 + resize(noise_offset, 21);
  p186_cast_7 <= signed(resize(p186_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p186_tmp_5 <= p186_tmp_2 + 1 WHEN p186_cast_6 > p186_cast_7 ELSE
      p186_tmp_2;
  
  p186_tmp_4 <= p186_tmp_1 WHEN p186_cast_6 > p186_cast_7 ELSE
      p186_tmp_1 + 1;
  
  p186_tmp_6 <= tmp_35 WHEN p186_tmp_5 > 10 ELSE
      noise_offset;
  
  p186_tmp_7 <= p186_tmp_6 - 10 WHEN p186_tmp_4 > 100000 ELSE
      p186_tmp_6;
  
  tmp_39 <= p186_tmp_7 WHEN tmp_11 = '1' ELSE
      noise_offset;

  rd_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_45 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_45 <= tmp_44;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  --update the i dc offset
  p196tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_44;
  p196tmp_cast <= p196tmp_mul_temp(37 DOWNTO 0);
  tmp_46 <= resize(p196tmp_cast, 39);

  rd_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_47 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_47 <= tmp_46;
      END IF;
    END IF;
  END PROCESS rd_39_process;


  tmp_48 <= tmp_47 + tmp_9;

  i_dc <= tmp_48(35 DOWNTO 12);

  p176_cast <= resize(tmp_5, 25);
  p176_cast_1 <=  - (p176_cast);
  
  p176_tmp <= p176_cast_1(23 DOWNTO 0) WHEN tmp_5 < 0 ELSE
      tmp_5;
  p176_cast_2 <= resize(p176_tmp, 34);
  p176_add_temp <= 50 + resize(tmp_39, 21);
  p176_cast_3 <= signed(resize(p176_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p176_tmp_1 <= to_signed(16#000000#, 24) WHEN p176_cast_2 > p176_cast_3 ELSE
      i_dc;
  
  tmp_44 <= p176_tmp_1 WHEN tmp = '1' ELSE
      tmp_45;

  p164i_out_sub_cast <= resize(i_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p164i_out_sub_cast_1 <= resize(tmp_44, 25);
  p164i_out_sub_temp <= p164i_out_sub_cast - p164i_out_sub_cast_1;
  i_out_1 <= p164i_out_sub_temp(23 DOWNTO 12);

  rd_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_38_reg <= (OTHERS => to_signed(2#000000000000#, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_38_reg(0) <= i_out_1;
        rd_38_reg(1 TO 2) <= rd_38_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_38_process;

  i_out_tmp <= rd_38_reg(2);

  i_out <= std_logic_vector(i_out_tmp);

  
  tmp_49 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  p198tmp_cast <= resize(q_in_1, 25);
  p198tmp_cast_1 <= p198tmp_cast(23 DOWNTO 0);
  tmp_50 <= resize(p198tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_52 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_52 <= tmp_51;
      END IF;
    END IF;
  END PROCESS rd_55_process;


  --update the q dc offset
  p199tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_51;
  p199tmp_cast <= p199tmp_mul_temp(37 DOWNTO 0);
  tmp_53 <= resize(p199tmp_cast, 39);

  rd_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_54 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_54 <= tmp_53;
      END IF;
    END IF;
  END PROCESS rd_54_process;


  tmp_55 <= tmp_54 + tmp_50;

  q_dc <= tmp_55(35 DOWNTO 12);

  p179_cast <= resize(tmp_23, 25);
  p179_cast_1 <=  - (p179_cast);
  
  p179_tmp <= p179_cast_1(23 DOWNTO 0) WHEN tmp_23 < 0 ELSE
      tmp_23;
  p179_cast_2 <= resize(p179_tmp, 34);
  p179_add_temp <= 50 + resize(tmp_39, 21);
  p179_cast_3 <= signed(resize(p179_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p179_tmp_1 <= to_signed(16#000000#, 24) WHEN p179_cast_2 > p179_cast_3 ELSE
      q_dc;
  
  tmp_51 <= p179_tmp_1 WHEN tmp_49 = '1' ELSE
      tmp_52;

  p163q_out_sub_cast <= resize(q_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p163q_out_sub_cast_1 <= resize(tmp_51, 25);
  p163q_out_sub_temp <= p163q_out_sub_cast - p163q_out_sub_cast_1;
  q_out_1 <= p163q_out_sub_temp(23 DOWNTO 12);

  rd_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_27_reg <= (OTHERS => to_signed(2#000000000000#, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_27_reg(0) <= q_out_1;
        rd_27_reg(1 TO 2) <= rd_27_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_27_process;

  q_out_tmp <= rd_27_reg(2);

  q_out <= std_logic_vector(q_out_tmp);

  
  tmp_56 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_66_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_66_reg(0) <= tmp_56;
        rd_66_reg(1) <= rd_66_reg(0);
      END IF;
    END IF;
  END PROCESS rd_66_process;

  tmp_57 <= rd_66_reg(1);

  
  tmp_58 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_59 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_59 <= tmp_58;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  rd_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_out_2 <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_out_2 <= i_out_1;
      END IF;
    END IF;
  END PROCESS rd_44_process;


  rd_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_out_2 <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_out_2 <= q_out_1;
      END IF;
    END IF;
  END PROCESS rd_56_process;


  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- RSSI Estimation
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  tmp_60 <= i_out_2 * i_out_2;

  tmp_61 <= resize(tmp_60, 25);

  tmp_62 <= q_out_2 * q_out_2;

  tmp_63 <= resize(tmp_62, 25);

  tmp_64 <= tmp_61 + tmp_63;

  rssi_inst <= unsigned(tmp_64(22 DOWNTO 0));

  
  tmp_65 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  
  tmp_66 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  counter <= tmp_67 + 1;

  
  p127_tmp <= to_unsigned(2#000000000#, 9) WHEN counter >= 256 ELSE
      counter;
  
  tmp_68 <= to_unsigned(2#000000000#, 9) WHEN tmp_65 = '1' ELSE
      p127_tmp;

  
  tmp_69 <= '1' WHEN tmp_67 /= 0 ELSE
      '0';

  
  tmp_70 <= tmp_68 WHEN tmp_69 = '1' ELSE
      tmp_67;

  
  tmp_71 <= tmp_70 WHEN tmp_59 = '1' ELSE
      counter_1;

  counter_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counter_1 <= to_unsigned(2#000000000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counter_1 <= tmp_71;
      END IF;
    END IF;
  END PROCESS counter_reg_process;


  
  tmp_72 <= '1' WHEN counter_1 = 0 ELSE
      '0';

  tmp_73 <= tmp_72 AND tmp_66;

  
  tmp_67 <= to_unsigned(2#000000001#, 9) WHEN tmp_73 = '1' ELSE
      counter_1;

  
  tmp_74 <= '1' WHEN tmp_67 /= 0 ELSE
      '0';

  rd_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_75 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_75 <= tmp_74;
      END IF;
    END IF;
  END PROCESS rd_32_process;


  
  tmp_76 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_77 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_77 <= tmp_76;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  
  tmp_78 <= '1' WHEN counter_1 = 0 ELSE
      '0';

  
  tmp_79 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  tmp_80 <= tmp_78 AND tmp_79;

  
  tmp_81 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_82 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_82 <= tmp_81;
      END IF;
    END IF;
  END PROCESS rd_31_process;


  
  tmp_83 <= '1' WHEN tmp_67 /= 0 ELSE
      '0';

  
  tmp_84 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  tmp_85 <= resize(rssi_inst, 33);

  
  tmp_88 <= tmp_87 WHEN tmp_84 = '1' ELSE
      tmp_86;

  
  tmp_89 <= tmp_88 WHEN tmp_83 = '1' ELSE
      tmp_87;

  
  tmp_90 <= tmp_89 WHEN tmp_82 = '1' ELSE
      rssi_sum;

  rssi_sum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_sum <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_sum <= tmp_90;
      END IF;
    END IF;
  END PROCESS rssi_sum_reg_process;


  
  tmp_87 <= to_unsigned(0, 32) WHEN tmp_80 = '1' ELSE
      rssi_sum;

  tmp_91 <= resize(tmp_87, 33);

  tmp_92 <= tmp_91 + tmp_85;

  tmp_86 <= tmp_92(31 DOWNTO 0);

  rd_67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_93 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_93 <= tmp_86;
      END IF;
    END IF;
  END PROCESS rd_67_process;


  rssi_out_1 <= to_unsigned(16#000000#, 24);

  rd_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_17_reg <= (OTHERS => to_unsigned(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_17_reg(0) <= rssi_out_1;
        rd_17_reg(1 TO 2) <= rd_17_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_17_process;

  rssi_out_2 <= rd_17_reg(2);

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counter_2 <= to_unsigned(2#000000000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counter_2 <= counter;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  p131_cast <= tmp_93 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p131_cast_1 <= p131_cast srl 8;
  p131_add_cast <= resize(p131_cast_1(39 DOWNTO 7), 34);
  p131_add_temp <= p131_add_cast + to_unsigned(1, 34);
  p131_cast_2 <= p131_add_temp(33 DOWNTO 1);
  
  p131_tmp <= p131_cast_2(23 DOWNTO 0) WHEN counter_2 >= 256 ELSE
      rssi_out_2;
  
  tmp_94 <= rssi_out_2 WHEN tmp_77 = '1' ELSE
      p131_tmp;

  
  tmp_95 <= tmp_94 WHEN tmp_75 = '1' ELSE
      rssi_out_2;

  
  tmp_96 <= tmp_95 WHEN tmp_57 = '1' ELSE
      rssi_out_2;

  rd_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_out_tmp <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_out_tmp <= tmp_96;
      END IF;
    END IF;
  END PROCESS rd_19_process;


  rssi_out <= std_logic_vector(rssi_out_tmp);

  
  tmp_97 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_98 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_98 <= tmp_97;
      END IF;
    END IF;
  END PROCESS rd_30_process;


  
  tmp_99 <= '1' WHEN tmp_67 /= 0 ELSE
      '0';

  
  tmp_100 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rssi_en_out_1 <= '0';

  rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_10_reg(0) <= rssi_en_out_1;
        rd_10_reg(1) <= rd_10_reg(0);
      END IF;
    END IF;
  END PROCESS rd_10_process;

  rssi_en_out_2 <= rd_10_reg(1);

  
  p135_tmp <= '1' WHEN counter >= 256 ELSE
      rssi_en_out_2;
  
  tmp_101 <= rssi_en_out_2 WHEN tmp_100 = '1' ELSE
      p135_tmp;

  
  tmp_102 <= tmp_101 WHEN tmp_99 = '1' ELSE
      rssi_en_out_2;

  
  tmp_103 <= tmp_102 WHEN tmp_98 = '1' ELSE
      rssi_en_out_2;

  rssi_en_out_3 <= tmp_103;

  out_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_en_out_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_en_out_4 <= rssi_en_out_3;
      END IF;
    END IF;
  END PROCESS out_3_pipe_process;


  out_3_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_en_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_en_out <= rssi_en_out_4;
      END IF;
    END IF;
  END PROCESS out_3_pipe_1_process;


  
  tmp_104 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_21_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_21_reg(0) <= tmp_104;
        rd_21_reg(1) <= rd_21_reg(0);
      END IF;
    END IF;
  END PROCESS rd_21_process;

  tmp_105 <= rd_21_reg(1);

  
  tmp_106 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_65_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_65_reg(0) <= tmp_106;
        rd_65_reg(1) <= rd_65_reg(0);
      END IF;
    END IF;
  END PROCESS rd_65_process;

  tmp_107 <= rd_65_reg(1);

  rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_en_in_1 <= gain_en_in;
      END IF;
    END IF;
  END PROCESS rd_13_process;


  rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_en_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_en_in_2 <= gain_en_in_1;
      END IF;
    END IF;
  END PROCESS rd_14_process;


  
  tmp_108 <= '1' WHEN gain_en_in_2 = '0' ELSE
      '0';

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_109 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_109 <= tmp_108;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  -- dir_out = 0 - do nothing
  -- dir_out = 1 - increase
  -- dir_out = 2 - decrease
  
  tmp_110 <= '1' WHEN i_in_1 < 0 ELSE
      '0';

  p204tmp_1 <=  - (resize(i_in_1, 13));
  tmp_111 <= p204tmp_1(11 DOWNTO 0);

  
  tmp_112 <= i_in_1 WHEN tmp_110 = '0' ELSE
      tmp_111;

  ai <= unsigned(tmp_112(10 DOWNTO 0));

  
  tmp_113 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_114 <= '1' WHEN q_in_1 < 0 ELSE
      '0';

  --HDL code generation from MATLAB function: dc_offset_correction_fixpt
  -- see if the MCU has done something and if so reset
  -- decrease
  -- this overrides anything else
  -- we're saturating the ADC so decrease gain
  --too high - decrease
  --too low - increase
  -- wait for some action and the processor is done
  p206tmp_1 <=  - (resize(q_in_1, 13));
  tmp_115 <= p206tmp_1(11 DOWNTO 0);

  
  tmp_116 <= q_in_1 WHEN tmp_114 = '0' ELSE
      tmp_115;

  aq <= unsigned(tmp_116(10 DOWNTO 0));

  
  tmp_117 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_118 <= tmp_113 OR tmp_117;

  rd_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_57_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_57_reg(0) <= tmp_118;
        rd_57_reg(1) <= rd_57_reg(0);
      END IF;
    END IF;
  END PROCESS rd_57_process;

  tmp_119 <= rd_57_reg(1);

  
  tmp_120 <= '1' WHEN tmp_103 = '1' ELSE
      '0';

  rd_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_121 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_121 <= tmp_120;
      END IF;
    END IF;
  END PROCESS rd_28_process;


  
  tmp_122 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_33_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_33_reg(0) <= tmp_122;
        rd_33_reg(1) <= rd_33_reg(0);
      END IF;
    END IF;
  END PROCESS rd_33_process;

  tmp_123 <= rd_33_reg(1);

  
  tmp_124 <= '1' WHEN tmp_67 /= 0 ELSE
      '0';

  rd_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_125 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_125 <= tmp_124;
      END IF;
    END IF;
  END PROCESS rd_34_process;


  
  tmp_126 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_127 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_127 <= tmp_126;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  rssiHold_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssiHold <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssiHold <= tmp_128;
      END IF;
    END IF;
  END PROCESS rssiHold_reg_process;


  p133_cast <= tmp_93 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p133_cast_1 <= p133_cast srl 8;
  p133_add_cast <= resize(p133_cast_1(39 DOWNTO 7), 34);
  p133_add_temp <= p133_add_cast + to_unsigned(1, 34);
  p133_cast_2 <= p133_add_temp(33 DOWNTO 1);
  
  p133_tmp <= p133_cast_2(23 DOWNTO 0) WHEN counter_2 >= 256 ELSE
      rssiHold;
  
  tmp_129 <= rssiHold WHEN tmp_127 = '1' ELSE
      p133_tmp;

  
  tmp_130 <= tmp_129 WHEN tmp_125 = '1' ELSE
      rssiHold;

  
  tmp_128 <= tmp_130 WHEN tmp_123 = '1' ELSE
      rssiHold;

  tmp_131 <= tmp_3 * tmp_3;

  tmp_132 <= resize(tmp_131, 49);

  tmp_133 <= tmp_21 * tmp_21;

  tmp_134 <= resize(tmp_133, 49);

  tmp_135 <= tmp_132 + tmp_134;

  rd_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_50_reg <= (OTHERS => to_signed(0, 49));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_50_reg(0) <= tmp_135;
        rd_50_reg(1) <= rd_50_reg(0);
      END IF;
    END IF;
  END PROCESS rd_50_process;

  tmp_136 <= rd_50_reg(1);

  -- only increase power if the rssi is away from the mean
  p83c_sub_cast <= signed(resize(tmp_128 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50));
  p83c_sub_cast_1 <= resize(tmp_136, 50);
  c <= p83c_sub_cast - p83c_sub_cast_1;

  
  tmp_137 <= '1' WHEN c < to_signed(0, 50) ELSE
      '0';

  p82tmp_cast <= resize(c, 51);
  p82tmp_cast_1 <=  - (p82tmp_cast);
  tmp_138 <= p82tmp_cast_1(49 DOWNTO 0);

  
  tmp_139 <= c WHEN tmp_137 = '0' ELSE
      tmp_138;

  rssi_diff <= unsigned(tmp_139(47 DOWNTO 24));

  rssi_high_goal_in_unsigned <= unsigned(rssi_high_goal_in);

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_7_reg <= (OTHERS => to_unsigned(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_7_reg(0) <= rssi_high_goal_in_unsigned;
        rd_7_reg(1 TO 2) <= rd_7_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_7_process;

  rssi_high_goal_in_1 <= rd_7_reg(2);

  
  alpha_relop1_1 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  rssi_low_goal_in_unsigned <= unsigned(rssi_low_goal_in);

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_6_reg <= (OTHERS => to_unsigned(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_6_reg(0) <= rssi_low_goal_in_unsigned;
        rd_6_reg(1 TO 2) <= rd_6_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  rssi_low_goal_in_1 <= rd_6_reg(2);

  
  alpha_relop1_2 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  
  tmp_140 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  rd_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_141 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_141 <= tmp_140;
      END IF;
    END IF;
  END PROCESS rd_59_process;


  
  tmp_143 <= '0' WHEN tmp_141 = '1' ELSE
      tmp_142;

  rd_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_144 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_144 <= tmp_143;
      END IF;
    END IF;
  END PROCESS rd_58_process;


  rd_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_145 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_145 <= tmp_142;
      END IF;
    END IF;
  END PROCESS rd_64_process;


  
  tmp_146 <= '1' WHEN alpha_relop1_2 = '1' ELSE
      tmp_145;

  
  tmp_147 <= '1' WHEN alpha_relop1_1 = '1' ELSE
      tmp_146;

  
  tmp_148 <= tmp_147 WHEN tmp_121 = '1' ELSE
      tmp_145;

  
  tmp_149 <= '1' WHEN tmp_119 = '1' ELSE
      tmp_148;

  
  tmp_150 <= tmp_149 WHEN tmp_109 = '1' ELSE
      tmp_145;

  tmp_151 <= tmp_142;

  rd_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_152 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_152 <= tmp_151;
      END IF;
    END IF;
  END PROCESS rd_26_process;


  p45_output : PROCESS (tmp_152, tmp_150, tmp_144)
    VARIABLE tmp153 : std_logic;
  BEGIN

    CASE tmp_152 IS
      WHEN '0' =>
        tmp153 := tmp_150;
      WHEN '1' =>
        tmp153 := tmp_144;
      WHEN OTHERS => 
        tmp153 := '0';
    END CASE;

    tmp_154 <= tmp153;
  END PROCESS p45_output;


  
  tmp_155 <= tmp_154 WHEN tmp_107 = '1' ELSE
      tmp_145;

  tmp_142 <= tmp_155;

  tmp_156 <= tmp_142;

  rd_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_157 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_157 <= tmp_156;
      END IF;
    END IF;
  END PROCESS rd_63_process;


  
  tmp_158 <= '1' WHEN gain_en_in_2 = '0' ELSE
      '0';

  
  tmp_159 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_160 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_161 <= tmp_159 OR tmp_160;

  rd_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_62_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_62_reg(0) <= tmp_161;
        rd_62_reg(1) <= rd_62_reg(0);
      END IF;
    END IF;
  END PROCESS rd_62_process;

  tmp_162 <= rd_62_reg(1);

  
  tmp_163 <= '1' WHEN tmp_103 = '1' ELSE
      '0';

  
  alpha_relop1_3 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  
  alpha_relop1_4 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- Gain Correction
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  dir_out_1 <= to_unsigned(2#00#, 2);

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_out_2 <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_out_2 <= dir_out_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_1_reg <= (OTHERS => to_unsigned(2#00#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_1_reg(0) <= dir_out_2;
        rd_1_reg(1) <= rd_1_reg(0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  dir_out_3 <= rd_1_reg(1);

  rd_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_164 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_164 <= tmp_163;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  
  tmp_165 <= to_unsigned(2#01#, 2) WHEN alpha_relop1_4 = '1' ELSE
      dir_out_3;

  
  tmp_166 <= to_unsigned(2#10#, 2) WHEN alpha_relop1_3 = '1' ELSE
      tmp_165;

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_167 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_167 <= tmp_158;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  
  tmp_168 <= tmp_166 WHEN tmp_164 = '1' ELSE
      dir_out_3;

  
  tmp_169 <= to_unsigned(2#10#, 2) WHEN tmp_162 = '1' ELSE
      tmp_168;

  
  tmp_170 <= tmp_169 WHEN tmp_167 = '1' ELSE
      dir_out_3;

  
  tmp_171 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  
  tmp_172 <= to_unsigned(2#00#, 2) WHEN tmp_171 = '1' ELSE
      dir_out_2;

  rd_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_25_reg <= (OTHERS => to_unsigned(2#00#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_25_reg(0) <= tmp_172;
        rd_25_reg(1) <= rd_25_reg(0);
      END IF;
    END IF;
  END PROCESS rd_25_process;

  tmp_173 <= rd_25_reg(1);

  p47_output : PROCESS (tmp_157, tmp_170, tmp_173, dir_out_3)
    VARIABLE tmp174 : unsigned(1 DOWNTO 0);
  BEGIN

    CASE tmp_157 IS
      WHEN '0' =>
        tmp174 := tmp_170;
      WHEN '1' =>
        tmp174 := tmp_173;
      WHEN OTHERS => 
        tmp174 := dir_out_3;
    END CASE;

    tmp_175 <= tmp174;
  END PROCESS p47_output;


  
  tmp_176 <= tmp_175 WHEN tmp_105 = '1' ELSE
      dir_out_3;

  rd_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_out_tmp <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_out_tmp <= tmp_176;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  dir_out <= std_logic_vector(dir_out_tmp);

  
  tmp_177 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_23_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_23_reg(0) <= tmp_177;
        rd_23_reg(1) <= rd_23_reg(0);
      END IF;
    END IF;
  END PROCESS rd_23_process;

  tmp_178 <= rd_23_reg(1);

  tmp_179 <= tmp_142;

  rd_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_180 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_180 <= tmp_179;
      END IF;
    END IF;
  END PROCESS rd_24_process;


  
  tmp_181 <= '1' WHEN gain_en_in_2 = '0' ELSE
      '0';

  
  tmp_182 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_183 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_184 <= tmp_182 OR tmp_183;

  rd_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_61_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_61_reg(0) <= tmp_184;
        rd_61_reg(1) <= rd_61_reg(0);
      END IF;
    END IF;
  END PROCESS rd_61_process;

  tmp_185 <= rd_61_reg(1);

  
  tmp_186 <= '1' WHEN tmp_103 = '1' ELSE
      '0';

  
  alpha_relop1_5 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  
  alpha_relop1_6 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  dir_en_out_1 <= '0';

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_en_out_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_en_out_2 <= dir_en_out_1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_4_reg(0) <= dir_en_out_2;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  dir_en_out_3 <= rd_4_reg(1);

  rd_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_187 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_187 <= tmp_186;
      END IF;
    END IF;
  END PROCESS rd_29_process;


  
  tmp_188 <= '1' WHEN alpha_relop1_6 = '1' ELSE
      dir_en_out_3;

  
  tmp_189 <= '1' WHEN alpha_relop1_5 = '1' ELSE
      tmp_188;

  rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_190 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_190 <= tmp_181;
      END IF;
    END IF;
  END PROCESS rd_15_process;


  
  tmp_191 <= tmp_189 WHEN tmp_187 = '1' ELSE
      dir_en_out_3;

  
  tmp_192 <= '1' WHEN tmp_185 = '1' ELSE
      tmp_191;

  
  tmp_193 <= tmp_192 WHEN tmp_190 = '1' ELSE
      dir_en_out_3;

  
  tmp_194 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  
  tmp_195 <= '1' WHEN tmp_194 = '1' ELSE
      dir_en_out_2;

  rd_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_60_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_60_reg(0) <= tmp_195;
        rd_60_reg(1) <= rd_60_reg(0);
      END IF;
    END IF;
  END PROCESS rd_60_process;

  tmp_196 <= rd_60_reg(1);

  p49_output : PROCESS (tmp_180, tmp_193, tmp_196, dir_en_out_3)
    VARIABLE tmp197 : std_logic;
  BEGIN

    CASE tmp_180 IS
      WHEN '0' =>
        tmp197 := tmp_193;
      WHEN '1' =>
        tmp197 := tmp_196;
      WHEN OTHERS => 
        tmp197 := dir_en_out_3;
    END CASE;

    tmp_198 <= tmp197;
  END PROCESS p49_output;


  
  tmp_199 <= tmp_198 WHEN tmp_178 = '1' ELSE
      dir_en_out_3;

  dir_en_out_4 <= tmp_199;

  rd_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_en_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_en_out <= dir_en_out_4;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt <= tmp_200;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;


  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  blinky_cnt_1 <= blinky_cnt + 1;

  
  tmp_201 <= '1' WHEN blinky_cnt_1 = 20000000 ELSE
      '0';

  
  tmp_200 <= to_unsigned(2#0000000000000000000000000#, 25) WHEN tmp_201 = '1' ELSE
      blinky_cnt_1;

  rd_69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_202 <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_202 <= tmp_200;
      END IF;
    END IF;
  END PROCESS rd_69_process;


  tmp_203 <= tmp_202 * to_unsigned(2#11010110101111#, 14);

  p210blinky_cast <= tmp_203(38 DOWNTO 37);
  blinky_1 <= p210blinky_cast(0);

  blinky_2 <= blinky_1;

  rd_68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_68_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_68_reg(0) <= blinky_2;
        rd_68_reg(1 TO 2) <= rd_68_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_68_process;

  blinky <= rd_68_reg(2);

  ce_out <= clk_enable;

END rtl;

