-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\pcore_Examples\Receiver_pcore_fifo\MATLAB\codegen\mcu_driver\hdlsrc\mcu_driver_fixpt.vhd
-- Created: 2013-12-30 15:48:56
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- mcu_reset_out                 ce_out        1
-- tr_sw                         ce_out        1
-- pa_en                         ce_out        1
-- tx_en                         ce_out        1
-- rx_en                         ce_out        1
-- init_done_reg                 ce_out        1
-- latch_done                    ce_out        1
-- reg_reset_done                ce_out        1
-- blinky                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mcu_driver_fixpt
-- Source Path: mcu_driver_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mcu_driver_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        init_done                         :   IN    std_logic;  -- ufix1
        mcu_reset_in                      :   IN    std_logic;  -- ufix1
        tr_sw_reg                         :   IN    std_logic;  -- ufix1
        pa_en_reg                         :   IN    std_logic;  -- ufix1
        tx_en_reg                         :   IN    std_logic;  -- ufix1
        rx_en_reg                         :   IN    std_logic;  -- ufix1
        latch                             :   IN    std_logic;  -- ufix1
        mcu_reg_reset                     :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        mcu_reset_out                     :   OUT   std_logic;  -- ufix1
        tr_sw                             :   OUT   std_logic;  -- ufix1
        pa_en                             :   OUT   std_logic;  -- ufix1
        tx_en                             :   OUT   std_logic;  -- ufix1
        rx_en                             :   OUT   std_logic;  -- ufix1
        init_done_reg                     :   OUT   std_logic;  -- ufix1
        latch_done                        :   OUT   std_logic;  -- ufix1
        reg_reset_done                    :   OUT   std_logic;  -- ufix1
        blinky                            :   OUT   std_logic  -- ufix1
        );
END mcu_driver_fixpt;


ARCHITECTURE rtl OF mcu_driver_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL tmp                              : std_logic;
  SIGNAL reset_not_empty                  : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : std_logic;
  SIGNAL reset_not_empty_reg_reset_not_empty : std_logic;
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : std_logic;  -- ufix1
  SIGNAL reset_1                          : std_logic;  -- ufix1
  SIGNAL reset_reg_reset                  : std_logic;  -- ufix1
  SIGNAL tmp_6                            : std_logic;  -- ufix1
  SIGNAL tmp_7                            : std_logic;  -- ufix1
  SIGNAL mcu_reset_out_1                  : std_logic;  -- ufix1
  SIGNAL mcu_reset_out_2                  : std_logic;  -- ufix1
  SIGNAL tmp_8                            : std_logic;
  SIGNAL tmp_9                            : std_logic;
  SIGNAL tmp_10                           : std_logic;  -- ufix1
  SIGNAL tr_switch                        : std_logic;  -- ufix1
  SIGNAL tr_switch_reg_tr_switch          : std_logic;  -- ufix1
  SIGNAL tmp_11                           : std_logic;  -- ufix1
  SIGNAL tmp_12                           : std_logic;  -- ufix1
  SIGNAL tr_sw_1                          : std_logic;  -- ufix1
  SIGNAL tr_sw_2                          : std_logic;  -- ufix1
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : std_logic;
  SIGNAL tmp_15                           : std_logic;  -- ufix1
  SIGNAL pa_enable                        : std_logic;  -- ufix1
  SIGNAL pa_enable_reg_pa_enable          : std_logic;  -- ufix1
  SIGNAL tmp_16                           : std_logic;  -- ufix1
  SIGNAL tmp_17                           : std_logic;  -- ufix1
  SIGNAL pa_en_1                          : std_logic;  -- ufix1
  SIGNAL pa_en_2                          : std_logic;  -- ufix1
  SIGNAL tmp_18                           : std_logic;
  SIGNAL tmp_19                           : std_logic;
  SIGNAL tmp_20                           : std_logic;  -- ufix1
  SIGNAL tx_enable                        : std_logic;  -- ufix1
  SIGNAL tx_enable_reg_tx_enable          : std_logic;  -- ufix1
  SIGNAL tmp_21                           : std_logic;  -- ufix1
  SIGNAL tmp_22                           : std_logic;  -- ufix1
  SIGNAL tx_en_1                          : std_logic;  -- ufix1
  SIGNAL tx_en_2                          : std_logic;  -- ufix1
  SIGNAL tmp_23                           : std_logic;
  SIGNAL tmp_24                           : std_logic;
  SIGNAL tmp_25                           : std_logic;  -- ufix1
  SIGNAL rx_enable                        : std_logic;  -- ufix1
  SIGNAL rx_enable_reg_rx_enable          : std_logic;  -- ufix1
  SIGNAL tmp_26                           : std_logic;  -- ufix1
  SIGNAL tmp_27                           : std_logic;  -- ufix1
  SIGNAL rx_en_1                          : std_logic;  -- ufix1
  SIGNAL rx_en_2                          : std_logic;  -- ufix1
  SIGNAL init_done_reg_1                  : std_logic;  -- ufix1
  SIGNAL init_done_reg_2                  : std_logic;  -- ufix1
  SIGNAL tmp_28                           : std_logic;
  SIGNAL latch_done_1                     : std_logic;  -- ufix1
  SIGNAL tmp_29                           : std_logic;  -- ufix1
  SIGNAL latch_done_2                     : std_logic;  -- ufix1
  SIGNAL tmp_30                           : std_logic;
  SIGNAL reg_reset_done_1                 : std_logic;  -- ufix1
  SIGNAL tmp_31                           : std_logic;  -- ufix1
  SIGNAL reg_reset_done_2                 : std_logic;  -- ufix1
  SIGNAL tmp_32                           : std_logic;
  SIGNAL tmp_33                           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt                       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_reg_blinky_cnt        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL tmp_34                           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL tmp_35                           : std_logic;
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL p54blinky_mul_temp               : unsigned(38 DOWNTO 0);  -- ufix39_En37
  SIGNAL p54blinky_cast                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL blinky_2                         : std_logic;  -- ufix1

BEGIN
  
  tmp <= '1' WHEN latch = '1' ELSE
      '0';

  enb <= clk_enable;

  tmp_1 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  
  tmp_2 <= '1' WHEN tmp_1 = '1' ELSE
      reset_not_empty;

  tmp_3 <= tmp_2;

  reset_not_empty_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reset_not_empty_reg_reset_not_empty <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reset_not_empty_reg_reset_not_empty <= tmp_3;
      END IF;
    END IF;
  END PROCESS reset_not_empty_reg_process;

  reset_not_empty <= reset_not_empty_reg_reset_not_empty;

  tmp_4 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  reset_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reset_reg_reset <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reset_reg_reset <= tmp_5;
      END IF;
    END IF;
  END PROCESS reset_reg_process;

  reset_1 <= reset_reg_reset;

  
  tmp_6 <= '1' WHEN tmp_4 = '1' ELSE
      reset_1;

  
  tmp_7 <= mcu_reset_in WHEN tmp = '1' ELSE
      tmp_6;

  tmp_5 <= tmp_7;

  mcu_reset_out_1 <= tmp_5;

  mcu_reset_out_2 <= mcu_reset_out_1;

  mcu_reset_out <= mcu_reset_out_2;

  
  tmp_8 <= '1' WHEN latch = '1' ELSE
      '0';

  tmp_9 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  tr_switch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tr_switch_reg_tr_switch <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tr_switch_reg_tr_switch <= tmp_10;
      END IF;
    END IF;
  END PROCESS tr_switch_reg_process;

  tr_switch <= tr_switch_reg_tr_switch;

  
  tmp_11 <= '0' WHEN tmp_9 = '1' ELSE
      tr_switch;

  
  tmp_12 <= tr_sw_reg WHEN tmp_8 = '1' ELSE
      tmp_11;

  tmp_10 <= tmp_12;

  tr_sw_1 <= tmp_10;

  tr_sw_2 <= tr_sw_1;

  tr_sw <= tr_sw_2;

  
  tmp_13 <= '1' WHEN latch = '1' ELSE
      '0';

  tmp_14 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  pa_enable_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pa_enable_reg_pa_enable <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        pa_enable_reg_pa_enable <= tmp_15;
      END IF;
    END IF;
  END PROCESS pa_enable_reg_process;

  pa_enable <= pa_enable_reg_pa_enable;

  
  tmp_16 <= '0' WHEN tmp_14 = '1' ELSE
      pa_enable;

  
  tmp_17 <= pa_en_reg WHEN tmp_13 = '1' ELSE
      tmp_16;

  tmp_15 <= tmp_17;

  pa_en_1 <= tmp_15;

  pa_en_2 <= pa_en_1;

  pa_en <= pa_en_2;

  
  tmp_18 <= '1' WHEN latch = '1' ELSE
      '0';

  tmp_19 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  tx_enable_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_enable_reg_tx_enable <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_enable_reg_tx_enable <= tmp_20;
      END IF;
    END IF;
  END PROCESS tx_enable_reg_process;

  tx_enable <= tx_enable_reg_tx_enable;

  
  tmp_21 <= '0' WHEN tmp_19 = '1' ELSE
      tx_enable;

  
  tmp_22 <= tx_en_reg WHEN tmp_18 = '1' ELSE
      tmp_21;

  tmp_20 <= tmp_22;

  tx_en_1 <= tmp_20;

  tx_en_2 <= tx_en_1;

  tx_en <= tx_en_2;

  
  tmp_23 <= '1' WHEN latch = '1' ELSE
      '0';

  tmp_24 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  rx_enable_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rx_enable_reg_rx_enable <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rx_enable_reg_rx_enable <= tmp_25;
      END IF;
    END IF;
  END PROCESS rx_enable_reg_process;

  rx_enable <= rx_enable_reg_rx_enable;

  
  tmp_26 <= '0' WHEN tmp_24 = '1' ELSE
      rx_enable;

  
  tmp_27 <= rx_en_reg WHEN tmp_23 = '1' ELSE
      tmp_26;

  tmp_25 <= tmp_27;

  rx_en_1 <= tmp_25;

  rx_en_2 <= rx_en_1;

  rx_en <= rx_en_2;

  init_done_reg_1 <= init_done;

  init_done_reg_2 <= init_done_reg_1;

  init_done_reg <= init_done_reg_2;

  
  tmp_28 <= '1' WHEN latch = '1' ELSE
      '0';

  latch_done_1 <= '0';

  
  tmp_29 <= '1' WHEN tmp_28 = '1' ELSE
      latch_done_1;

  latch_done_2 <= tmp_29;

  latch_done <= latch_done_2;

  tmp_30 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  --HDL code generation from MATLAB function: mcu_driver_fixpt
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  reg_reset_done_1 <= '0';

  
  tmp_31 <= '1' WHEN tmp_30 = '1' ELSE
      reg_reset_done_1;

  reg_reset_done_2 <= tmp_31;

  reg_reset_done <= reg_reset_done_2;

  tmp_32 <= ( NOT reset_not_empty) OR mcu_reg_reset;

  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt_reg_blinky_cnt <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt_reg_blinky_cnt <= tmp_33;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;

  blinky_cnt <= blinky_cnt_reg_blinky_cnt;

  
  tmp_34 <= to_unsigned(2#0000000000000000000000000#, 25) WHEN tmp_32 = '1' ELSE
      blinky_cnt;

  blinky_cnt_1 <= tmp_34 + 1;

  
  tmp_35 <= '1' WHEN blinky_cnt_1 = 20000000 ELSE
      '0';

  
  tmp_33 <= to_unsigned(2#0000000000000000000000000#, 25) WHEN tmp_35 = '1' ELSE
      blinky_cnt_1;

  p54blinky_mul_temp <= tmp_33 * to_unsigned(2#11010110101111#, 14);
  p54blinky_cast <= p54blinky_mul_temp(38 DOWNTO 37);
  blinky_1 <= p54blinky_cast(0);

  blinky_2 <= blinky_1;

  blinky <= blinky_2;

  ce_out <= clk_enable;

END rtl;

