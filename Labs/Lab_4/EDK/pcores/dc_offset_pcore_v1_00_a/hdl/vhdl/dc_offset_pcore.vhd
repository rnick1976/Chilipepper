-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\QPSK_Pcore\Labs\Lab_8\MATLAB\codegen\dc_offset_correction\hdlsrc\dc_offset_pcore.vhd
-- Created: 2013-12-31 17:34:21
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_pcore
-- Source Path: dc_offset_pcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dc_offset_pcore IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        AXI_Lite_ACLK                     :   IN    std_logic;  -- ufix1
        AXI_Lite_ARESETN                  :   IN    std_logic;  -- ufix1
        AXI_Lite_AWADDR                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_AWVALID                  :   IN    std_logic;  -- ufix1
        AXI_Lite_WDATA                    :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_WSTRB                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI_Lite_WVALID                   :   IN    std_logic;  -- ufix1
        AXI_Lite_BREADY                   :   IN    std_logic;  -- ufix1
        AXI_Lite_ARADDR                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_ARVALID                  :   IN    std_logic;  -- ufix1
        AXI_Lite_RREADY                   :   IN    std_logic;  -- ufix1
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        blinky                            :   OUT   std_logic;  -- ufix1
        AXI_Lite_AWREADY                  :   OUT   std_logic;  -- ufix1
        AXI_Lite_WREADY                   :   OUT   std_logic;  -- ufix1
        AXI_Lite_BRESP                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI_Lite_BVALID                   :   OUT   std_logic;  -- ufix1
        AXI_Lite_ARREADY                  :   OUT   std_logic;  -- ufix1
        AXI_Lite_RDATA                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI_Lite_RRESP                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI_Lite_RVALID                   :   OUT   std_logic  -- ufix1
        );
END dc_offset_pcore;


ARCHITECTURE rtl OF dc_offset_pcore IS

  -- Component Declarations
  COMPONENT dc_offset_pcore_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI_Lite_ACLK                   :   IN    std_logic;  -- ufix1
          AXI_Lite_ARESETN                :   IN    std_logic;  -- ufix1
          AXI_Lite_AWADDR                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_AWVALID                :   IN    std_logic;  -- ufix1
          AXI_Lite_WDATA                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_WSTRB                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI_Lite_WVALID                 :   IN    std_logic;  -- ufix1
          AXI_Lite_BREADY                 :   IN    std_logic;  -- ufix1
          AXI_Lite_ARADDR                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_ARVALID                :   IN    std_logic;  -- ufix1
          AXI_Lite_RREADY                 :   IN    std_logic;  -- ufix1
          read_rssi_out                   :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          read_rssi_en_out                :   IN    std_logic;  -- ufix1
          read_dir_out                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_dir_en_out                 :   IN    std_logic;  -- ufix1
          AXI_Lite_AWREADY                :   OUT   std_logic;  -- ufix1
          AXI_Lite_WREADY                 :   OUT   std_logic;  -- ufix1
          AXI_Lite_BRESP                  :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI_Lite_BVALID                 :   OUT   std_logic;  -- ufix1
          AXI_Lite_ARREADY                :   OUT   std_logic;  -- ufix1
          AXI_Lite_RDATA                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI_Lite_RRESP                  :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI_Lite_RVALID                 :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_gain_en_in                :   OUT   std_logic;  -- ufix1
          write_rssi_low_goal_in          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          write_rssi_high_goal_in         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          write_rx_en_in                  :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT dc_offset_pcore_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          i_in                            :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          q_in                            :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          gain_en_in                      :   IN    std_logic;  -- ufix1
          rssi_low_goal_in                :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          rssi_high_goal_in               :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          rx_en_in                        :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          i_out                           :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
          q_out                           :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
          rssi_out                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          rssi_en_out                     :   OUT   std_logic;  -- ufix1
          dir_out                         :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          dir_en_out                      :   OUT   std_logic;  -- ufix1
          blinky                          :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dc_offset_pcore_axi_lite
    USE ENTITY work.dc_offset_pcore_axi_lite(rtl);

  FOR ALL : dc_offset_pcore_dut
    USE ENTITY work.dc_offset_pcore_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL rssi_out_sig                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_en_out_sig                  : std_logic;  -- ufix1
  SIGNAL dir_out_sig                      : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_en_out_sig                   : std_logic;  -- ufix1
  SIGNAL AXI_Lite_BRESP_tmp               : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI_Lite_RDATA_tmp               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI_Lite_RRESP_tmp               : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL gain_en_in_sig                   : std_logic;  -- ufix1
  SIGNAL rssi_low_goal_in_sig             : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_sig            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL rx_en_in_sig                     : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL i_out_sig                        : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL q_out_sig                        : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL blinky_sig                       : std_logic;  -- ufix1

BEGIN
  u_dc_offset_pcore_axi_lite_inst : dc_offset_pcore_axi_lite
    PORT MAP( reset => reset,
              AXI_Lite_ACLK => AXI_Lite_ACLK,  -- ufix1
              AXI_Lite_ARESETN => AXI_Lite_ARESETN,  -- ufix1
              AXI_Lite_AWADDR => AXI_Lite_AWADDR,  -- ufix32
              AXI_Lite_AWVALID => AXI_Lite_AWVALID,  -- ufix1
              AXI_Lite_WDATA => AXI_Lite_WDATA,  -- ufix32
              AXI_Lite_WSTRB => AXI_Lite_WSTRB,  -- ufix4
              AXI_Lite_WVALID => AXI_Lite_WVALID,  -- ufix1
              AXI_Lite_BREADY => AXI_Lite_BREADY,  -- ufix1
              AXI_Lite_ARADDR => AXI_Lite_ARADDR,  -- ufix32
              AXI_Lite_ARVALID => AXI_Lite_ARVALID,  -- ufix1
              AXI_Lite_RREADY => AXI_Lite_RREADY,  -- ufix1
              read_rssi_out => rssi_out_sig,  -- ufix24
              read_rssi_en_out => rssi_en_out_sig,  -- ufix1
              read_dir_out => dir_out_sig,  -- ufix2
              read_dir_en_out => dir_en_out_sig,  -- ufix1
              AXI_Lite_AWREADY => AXI_Lite_AWREADY,  -- ufix1
              AXI_Lite_WREADY => AXI_Lite_WREADY,  -- ufix1
              AXI_Lite_BRESP => AXI_Lite_BRESP_tmp,  -- ufix2
              AXI_Lite_BVALID => AXI_Lite_BVALID,  -- ufix1
              AXI_Lite_ARREADY => AXI_Lite_ARREADY,  -- ufix1
              AXI_Lite_RDATA => AXI_Lite_RDATA_tmp,  -- ufix32
              AXI_Lite_RRESP => AXI_Lite_RRESP_tmp,  -- ufix2
              AXI_Lite_RVALID => AXI_Lite_RVALID,  -- ufix1
              write_axi_enable => dut_enable,  -- ufix1
              write_gain_en_in => gain_en_in_sig,  -- ufix1
              write_rssi_low_goal_in => rssi_low_goal_in_sig,  -- ufix24
              write_rssi_high_goal_in => rssi_high_goal_in_sig,  -- ufix24
              write_rx_en_in => rx_en_in_sig,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_dc_offset_pcore_dut_inst : dc_offset_pcore_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => dut_enable,  -- ufix1
              i_in => i_in,  -- sfix12
              q_in => q_in,  -- sfix12
              gain_en_in => gain_en_in_sig,  -- ufix1
              rssi_low_goal_in => rssi_low_goal_in_sig,  -- ufix24
              rssi_high_goal_in => rssi_high_goal_in_sig,  -- ufix24
              rx_en_in => rx_en_in_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              i_out => i_out_sig,  -- sfix12
              q_out => q_out_sig,  -- sfix12
              rssi_out => rssi_out_sig,  -- ufix24
              rssi_en_out => rssi_en_out_sig,  -- ufix1
              dir_out => dir_out_sig,  -- ufix2
              dir_en_out => dir_en_out_sig,  -- ufix1
              blinky => blinky_sig  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  blinky <= blinky_sig;

  i_out <= i_out_sig;

  q_out <= q_out_sig;

  AXI_Lite_BRESP <= AXI_Lite_BRESP_tmp;

  AXI_Lite_RDATA <= AXI_Lite_RDATA_tmp;

  AXI_Lite_RRESP <= AXI_Lite_RRESP_tmp;

END rtl;

