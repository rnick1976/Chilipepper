-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\pcore_Examples\FIFO_DEMO\MATLAB\codegen\tx_fifo\hdlsrc\tx_fifo_pcore_addr_decoder.vhd
-- Created: 2013-11-15 16:46:06
-- 
-- Generated by MATLAB 8.2, MATLAB Coder 2.5 and HDL Coder 3.3
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tx_fifo_pcore_addr_decoder
-- Source Path: tx_fifo_pcore/tx_fifo_pcore_axi_lite/tx_fifo_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY tx_fifo_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_empty                        :   IN    std_logic;  -- ufix1
        read_byte_received                :   IN    std_logic;  -- ufix1
        read_full                         :   IN    std_logic;  -- ufix1
        read_bytes_available              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_get_byte                    :   OUT   std_logic;  -- ufix1
        write_store_byte                  :   OUT   std_logic;  -- ufix1
        write_byte_in                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_reset_fifo                  :   OUT   std_logic;  -- ufix1
        write_fifo_enable                 :   OUT   std_logic  -- ufix1
        );
END tx_fifo_pcore_addr_decoder;


ARCHITECTURE rtl OF tx_fifo_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_empty                 : std_logic;  -- ufix1
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_bytes_available       : std_logic;  -- ufix1
  SIGNAL decode_sel_full                  : std_logic;  -- ufix1
  SIGNAL decode_sel_byte_received         : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_empty                   : std_logic;  -- ufix1
  SIGNAL data_in_empty                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_empty                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_byte_received           : std_logic;  -- ufix1
  SIGNAL data_in_byte_received            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_byte_received          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_full                    : std_logic;  -- ufix1
  SIGNAL data_in_full                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_full                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_bytes_available_unsigned    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_bytes_available         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_bytes_available        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL data_in_get_byte                 : std_logic;  -- ufix1
  SIGNAL decode_sel_get_byte              : std_logic;  -- ufix1
  SIGNAL reg_enb_get_byte                 : std_logic;  -- ufix1
  SIGNAL write_reg_get_byte               : std_logic;  -- ufix1
  SIGNAL data_in_store_byte               : std_logic;  -- ufix1
  SIGNAL decode_sel_store_byte            : std_logic;  -- ufix1
  SIGNAL reg_enb_store_byte               : std_logic;  -- ufix1
  SIGNAL write_reg_store_byte             : std_logic;  -- ufix1
  SIGNAL decode_sel_byte_in               : std_logic;  -- ufix1
  SIGNAL reg_enb_byte_in                  : std_logic;  -- ufix1
  SIGNAL write_reg_byte_in                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_reset_fifo               : std_logic;  -- ufix1
  SIGNAL decode_sel_reset_fifo            : std_logic;  -- ufix1
  SIGNAL reg_enb_reset_fifo               : std_logic;  -- ufix1
  SIGNAL write_reg_reset_fifo             : std_logic;  -- ufix1
  SIGNAL data_in_fifo_enable              : std_logic;  -- ufix1
  SIGNAL decode_sel_fifo_enable           : std_logic;  -- ufix1
  SIGNAL reg_enb_fifo_enable              : std_logic;  -- ufix1
  SIGNAL write_reg_fifo_enable            : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_empty <= '1' WHEN addr_sel_unsigned = 69 ELSE
      '0';

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_bytes_available <= '1' WHEN addr_sel_unsigned = 72 ELSE
      '0';

  
  decode_sel_full <= '1' WHEN addr_sel_unsigned = 71 ELSE
      '0';

  
  decode_sel_byte_received <= '1' WHEN addr_sel_unsigned = 70 ELSE
      '0';

  const_z <= (OTHERS => 'Z');


  reg_empty_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_empty <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_empty <= read_empty;
      END IF;
    END IF;
  END PROCESS reg_empty_process;


  data_in_empty <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_empty;

  
  decode_rd_empty <= const_z WHEN decode_sel_empty = '0' ELSE
      data_in_empty;

  reg_byte_received_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_byte_received <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_byte_received <= read_byte_received;
      END IF;
    END IF;
  END PROCESS reg_byte_received_process;


  data_in_byte_received <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_byte_received;

  
  decode_rd_byte_received <= decode_rd_empty WHEN decode_sel_byte_received = '0' ELSE
      data_in_byte_received;

  reg_full_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_full <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_full <= read_full;
      END IF;
    END IF;
  END PROCESS reg_full_process;


  data_in_full <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_full;

  
  decode_rd_full <= decode_rd_byte_received WHEN decode_sel_full = '0' ELSE
      data_in_full;

  read_bytes_available_unsigned <= unsigned(read_bytes_available);

  reg_bytes_available_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_bytes_available <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_bytes_available <= read_bytes_available_unsigned;
      END IF;
    END IF;
  END PROCESS reg_bytes_available_process;


  
  decode_rd_bytes_available <= decode_rd_full WHEN decode_sel_bytes_available = '0' ELSE
      read_reg_bytes_available;

  data_read <= std_logic_vector(decode_rd_bytes_available);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = 1 ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  data_in_get_byte <= data_write_unsigned(0);

  
  decode_sel_get_byte <= '1' WHEN addr_sel_unsigned = 64 ELSE
      '0';

  reg_enb_get_byte <= decode_sel_get_byte AND wr_enb;

  reg_get_byte_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_get_byte <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_get_byte = '1' THEN
        write_reg_get_byte <= data_in_get_byte;
      END IF;
    END IF;
  END PROCESS reg_get_byte_process;


  write_get_byte <= write_reg_get_byte;

  data_in_store_byte <= data_write_unsigned(0);

  
  decode_sel_store_byte <= '1' WHEN addr_sel_unsigned = 65 ELSE
      '0';

  reg_enb_store_byte <= decode_sel_store_byte AND wr_enb;

  reg_store_byte_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_store_byte <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_store_byte = '1' THEN
        write_reg_store_byte <= data_in_store_byte;
      END IF;
    END IF;
  END PROCESS reg_store_byte_process;


  write_store_byte <= write_reg_store_byte;

  
  decode_sel_byte_in <= '1' WHEN addr_sel_unsigned = 66 ELSE
      '0';

  reg_enb_byte_in <= decode_sel_byte_in AND wr_enb;

  reg_byte_in_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_byte_in <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_byte_in = '1' THEN
        write_reg_byte_in <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_byte_in_process;


  write_byte_in <= std_logic_vector(write_reg_byte_in);

  data_in_reset_fifo <= data_write_unsigned(0);

  
  decode_sel_reset_fifo <= '1' WHEN addr_sel_unsigned = 67 ELSE
      '0';

  reg_enb_reset_fifo <= decode_sel_reset_fifo AND wr_enb;

  reg_reset_fifo_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_reset_fifo <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_reset_fifo = '1' THEN
        write_reg_reset_fifo <= data_in_reset_fifo;
      END IF;
    END IF;
  END PROCESS reg_reset_fifo_process;


  write_reset_fifo <= write_reg_reset_fifo;

  data_in_fifo_enable <= data_write_unsigned(0);

  
  decode_sel_fifo_enable <= '1' WHEN addr_sel_unsigned = 68 ELSE
      '0';

  reg_enb_fifo_enable <= decode_sel_fifo_enable AND wr_enb;

  reg_fifo_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_fifo_enable <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_fifo_enable = '1' THEN
        write_reg_fifo_enable <= data_in_fifo_enable;
      END IF;
    END IF;
  END PROCESS reg_fifo_enable_process;


  write_fifo_enable <= write_reg_fifo_enable;

END rtl;

