-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\pcore_Examples\FIFO_DEMO\MATLAB\codegen\tx_fifo\hdlsrc\tx_fifo_pcore_dut.vhd
-- Created: 2013-11-15 16:46:06
-- 
-- Generated by MATLAB 8.2, MATLAB Coder 2.5 and HDL Coder 3.3
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tx_fifo_pcore_dut
-- Source Path: tx_fifo_pcore/tx_fifo_pcore_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY tx_fifo_pcore_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        get_byte                          :   IN    std_logic;  -- ufix1
        store_byte                        :   IN    std_logic;  -- ufix1
        byte_in                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        reset_fifo                        :   IN    std_logic;  -- ufix1
        fifo_enable                       :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        dout                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        empty                             :   OUT   std_logic;  -- ufix1
        byte_received                     :   OUT   std_logic;  -- ufix1
        full                              :   OUT   std_logic;  -- ufix1
        bytes_available                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dbg_fifo_enable                   :   OUT   std_logic  -- ufix1
        );
END tx_fifo_pcore_dut;


ARCHITECTURE rtl OF tx_fifo_pcore_dut IS

  -- Component Declarations
  COMPONENT tx_fifo_fixpt
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          get_byte                        :   IN    std_logic;  -- ufix1
          store_byte                      :   IN    std_logic;  -- ufix1
          byte_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_fifo                      :   IN    std_logic;  -- ufix1
          fifo_enable                     :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          dout                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          empty                           :   OUT   std_logic;  -- ufix1
          byte_received                   :   OUT   std_logic;  -- ufix1
          full                            :   OUT   std_logic;  -- ufix1
          bytes_available                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dbg_fifo_enable                 :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_fifo_fixpt
    USE ENTITY work.tx_fifo_fixpt(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL get_byte_sig                     : std_logic;  -- ufix1
  SIGNAL store_byte_sig                   : std_logic;  -- ufix1
  SIGNAL reset_fifo_sig                   : std_logic;  -- ufix1
  SIGNAL fifo_enable_sig                  : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL dout_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL empty_sig                        : std_logic;  -- ufix1
  SIGNAL byte_received_sig                : std_logic;  -- ufix1
  SIGNAL full_sig                         : std_logic;  -- ufix1
  SIGNAL bytes_available_sig              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dbg_fifo_enable_sig              : std_logic;  -- ufix1

BEGIN
  u_tx_fifo_fixpt : tx_fifo_fixpt
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              get_byte => get_byte_sig,  -- ufix1
              store_byte => store_byte_sig,  -- ufix1
              byte_in => byte_in,  -- ufix32
              reset_fifo => reset_fifo_sig,  -- ufix1
              fifo_enable => fifo_enable_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              dout => dout_sig,  -- ufix8
              empty => empty_sig,  -- ufix1
              byte_received => byte_received_sig,  -- ufix1
              full => full_sig,  -- ufix1
              bytes_available => bytes_available_sig,  -- ufix32
              dbg_fifo_enable => dbg_fifo_enable_sig  -- ufix1
              );

  get_byte_sig <= get_byte;

  store_byte_sig <= store_byte;

  reset_fifo_sig <= reset_fifo;

  fifo_enable_sig <= fifo_enable;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  dout <= dout_sig;

  empty <= empty_sig;

  byte_received <= byte_received_sig;

  full <= full_sig;

  bytes_available <= bytes_available_sig;

  dbg_fifo_enable <= dbg_fifo_enable_sig;

END rtl;

